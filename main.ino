#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h> 
short g_bleft = 8;
short g_bright = 9;
short g_bjump = 10;

short g_xposition = 63;

short g_level = 1; 

Adafruit_SSD1306 display(128, 64, &Wire, -1);

#ifdef __arm__
// should use uinstd.h to define sbrk but Due causes a conflict
extern "C" char* sbrk(int incr);
#else   // __ARM__
extern char* __brkval;
#endif  // __arm__

int freeMemory() {
  
  char top;
#ifdef __arm__
  return &top - reinterpret_cast<char*>(sbrk(0));
#elif defined(CORE_TEENSY) || (ARDUINO > 103 && ARDUINO != 151)
  return &top - __brkval;
#else   // __arm__
  return __brkval ? &top - __brkval : &top - __malloc_heap_start;
#endif  // __arm__
}
unsigned char** getst() { 
	unsigned char** st = (unsigned char**)malloc(sizeof(unsigned char*) * 129);
	st[0] = (unsigned char*)malloc(sizeof(unsigned char) * 7);
	st[0][0] = 1; st[0][1] = 2; st[0][2] = 14; st[0][3] = 6; st[0][4] = 21; st[0][5] = 2; st[0][6] = 255;
  st[1] = (unsigned char*)malloc(sizeof(unsigned char) * 7);
	st[1][0] = 1; st[1][1] = 2; st[1][2] = 13; st[1][3] = 8; st[1][4] = 16; st[1][5] = 16; st[1][6] = 255;
  st[2] = (unsigned char*)malloc(sizeof(unsigned char) * 10);
	st[2][0] = 1; st[2][1] = 2; st[2][2] = 13; st[2][3] = 2; st[2][4] = 4; st[2][5] = 2; st[2][6] = 16; st[2][7] = 1; st[2][8] = 16; st[2][9] = 1;
  st[3] = (unsigned char*)malloc(sizeof(unsigned char) * 15);
	st[3][0] = 1; st[3][1] = 2; st[3][2] = 13; st[3][3] = 2; st[3][4] = 4; st[3][5] = 2; st[3][6] = 16; st[3][7] = 1; st[3][8] = 2; st[3][9] = 4; st[3][10] = 2; st[3][11] = 4; st[3][12] = 3; st[3][13] = 1; st[3][14] = 255;
  st[4] = (unsigned char*)malloc(sizeof(unsigned char) * 19);
	st[4][0] = 1; st[4][1] = 2; st[4][2] = 13; st[4][3] = 2; st[4][4] = 4; st[4][5] = 2; st[4][6] = 16; st[4][7] = 1; st[4][8] = 1; st[4][9] = 2; st[4][10] = 2; st[4][11] = 1; st[4][12] = 1; st[4][13] = 2; st[4][14] = 4; st[4][15] = 1; st[4][16] = 2; st[4][17] = 1; st[4][18] = 255;
  st[5] = (unsigned char*)malloc(sizeof(unsigned char) * 19);
	st[5][0] = 1; st[5][1] = 2; st[5][2] = 13; st[5][3] = 2; st[5][4] = 4; st[5][5] = 2; st[5][6] = 16; st[5][7] = 1; st[5][8] = 1; st[5][9] = 1; st[5][10] = 3; st[5][11] = 1; st[5][12] = 1; st[5][13] = 1; st[5][14] = 6; st[5][15] = 1; st[5][16] = 1; st[5][17] = 1; st[5][18] = 255;
  st[6] = (unsigned char*)malloc(sizeof(unsigned char) * 21);
	st[6][0] = 1; st[6][1] = 2; st[6][2] = 13; st[6][3] = 2; st[6][4] = 4; st[6][5] = 2; st[6][6] = 16; st[6][7] = 1; st[6][8] = 1; st[6][9] = 1; st[6][10] = 2; st[6][11] = 2; st[6][12] = 1; st[6][13] = 1; st[6][14] = 2; st[6][15] = 2; st[6][16] = 2; st[6][17] = 1; st[6][18] = 1; st[6][19] = 1; st[6][20] = 255;
  st[7] = (unsigned char*)malloc(sizeof(unsigned char) * 21);
	st[7][0] = 1; st[7][1] = 2; st[7][2] = 13; st[7][3] = 2; st[7][4] = 4; st[7][5] = 2; st[7][6] = 16; st[7][7] = 1; st[7][8] = 1; st[7][9] = 1; st[7][10] = 2; st[7][11] = 1; st[7][12] = 2; st[7][13] = 1; st[7][14] = 2; st[7][15] = 2; st[7][16] = 2; st[7][17] = 1; st[7][18] = 1; st[7][19] = 1; st[7][20] = 255;
  st[8] = (unsigned char*)malloc(sizeof(unsigned char) * 21);
	st[8][0] = 1; st[8][1] = 2; st[8][2] = 13; st[8][3] = 2; st[8][4] = 4; st[8][5] = 2; st[8][6] = 16; st[8][7] = 1; st[8][8] = 1; st[8][9] = 1; st[8][10] = 2; st[8][11] = 1; st[8][12] = 2; st[8][13] = 1; st[8][14] = 2; st[8][15] = 2; st[8][16] = 2; st[8][17] = 1; st[8][18] = 1; st[8][19] = 1; st[8][20] = 255;
  st[9] = (unsigned char*)malloc(sizeof(unsigned char) * 21);
	st[9][0] = 1; st[9][1] = 2; st[9][2] = 13; st[9][3] = 2; st[9][4] = 4; st[9][5] = 2; st[9][6] = 16; st[9][7] = 1; st[9][8] = 1; st[9][9] = 1; st[9][10] = 2; st[9][11] = 1; st[9][12] = 2; st[9][13] = 1; st[9][14] = 2; st[9][15] = 2; st[9][16] = 2; st[9][17] = 1; st[9][18] = 1; st[9][19] = 1; st[9][20] = 255;
  st[10] = (unsigned char*)malloc(sizeof(unsigned char) * 21);
	st[10][0] = 1; st[10][1] = 2; st[10][2] = 13; st[10][3] = 2; st[10][4] = 4; st[10][5] = 2; st[10][6] = 16; st[10][7] = 1; st[10][8] = 1; st[10][9] = 1; st[10][10] = 2; st[10][11] = 1; st[10][12] = 2; st[10][13] = 1; st[10][14] = 2; st[10][15] = 2; st[10][16] = 2; st[10][17] = 1; st[10][18] = 1; st[10][19] = 1; st[10][20] = 255;
  st[11] = (unsigned char*)malloc(sizeof(unsigned char) * 17);
	st[11][0] = 1; st[11][1] = 2; st[11][2] = 13; st[11][3] = 8; st[11][4] = 16; st[11][5] = 1; st[11][6] = 1; st[11][7] = 1; st[11][8] = 3; st[11][9] = 2; st[11][10] = 3; st[11][11] = 1; st[11][12] = 3; st[11][13] = 1; st[11][14] = 1; st[11][15] = 1; st[11][16] = 255;
  st[12] = (unsigned char*)malloc(sizeof(unsigned char) * 16);
	st[12][0] = 1; st[12][1] = 2; st[12][2] = 14; st[12][3] = 6; st[12][4] = 17; st[12][5] = 1; st[12][6] = 1; st[12][7] = 2; st[12][8] = 6; st[12][9] = 2; st[12][10] = 2; st[12][11] = 2; st[12][12] = 1; st[12][13] = 1; st[12][14] = 1; st[12][15] = 255;
  st[13] = (unsigned char*)malloc(sizeof(unsigned char) * 11);
	st[13][0] = 1; st[13][1] = 2; st[13][2] = 37; st[13][3] = 1; st[13][4] = 2; st[13][5] = 2; st[13][6] = 4; st[13][7] = 6; st[13][8] = 2; st[13][9] = 1; st[13][10] = 255;
  st[14] = (unsigned char*)malloc(sizeof(unsigned char) * 9);
	st[14][0] = 1; st[14][1] = 2; st[14][2] = 37; st[14][3] = 1; st[14][4] = 1; st[14][5] = 11; st[14][6] = 4; st[14][7] = 1; st[14][8] = 255;
  st[15] = (unsigned char*)malloc(sizeof(unsigned char) * 13);
	st[15][0] = 1; st[15][1] = 2; st[15][2] = 23; st[15][3] = 2; st[15][4] = 12; st[15][5] = 1; st[15][6] = 1; st[15][7] = 1; st[15][8] = 8; st[15][9] = 3; st[15][10] = 3; st[15][11] = 1; st[15][12] = 255;
  st[16] = (unsigned char*)malloc(sizeof(unsigned char) * 13);
	st[16][0] = 1; st[16][1] = 2; st[16][2] = 23; st[16][3] = 3; st[16][4] = 11; st[16][5] = 1; st[16][6] = 1; st[16][7] = 1; st[16][8] = 10; st[16][9] = 2; st[16][10] = 2; st[16][11] = 1; st[16][12] = 255;
  st[17] = (unsigned char*)malloc(sizeof(unsigned char) * 17);
	st[17][0] = 1; st[17][1] = 2; st[17][2] = 18; st[17][3] = 3; st[17][4] = 3; st[17][5] = 3; st[17][6] = 10; st[17][7] = 1; st[17][8] = 1; st[17][9] = 5; st[17][10] = 1; st[17][11] = 3; st[17][12] = 3; st[17][13] = 2; st[17][14] = 1; st[17][15] = 1; st[17][16] = 255;
  st[18] = (unsigned char*)malloc(sizeof(unsigned char) * 19);
	st[18][0] = 1; st[18][1] = 2; st[18][2] = 18; st[18][3] = 3; st[18][4] = 4; st[18][5] = 3; st[18][6] = 9; st[18][7] = 1; st[18][8] = 5; st[18][9] = 1; st[18][10] = 1; st[18][11] = 1; st[18][12] = 1; st[18][13] = 2; st[18][14] = 3; st[18][15] = 1; st[18][16] = 1; st[18][17] = 1; st[18][18] = 255;
  st[19] = (unsigned char*)malloc(sizeof(unsigned char) * 19);
	st[19][0] = 1; st[19][1] = 2; st[19][2] = 18; st[19][3] = 3; st[19][4] = 5; st[19][5] = 3; st[19][6] = 8; st[19][7] = 1; st[19][8] = 5; st[19][9] = 1; st[19][10] = 1; st[19][11] = 1; st[19][12] = 2; st[19][13] = 2; st[19][14] = 2; st[19][15] = 1; st[19][16] = 1; st[19][17] = 1; st[19][18] = 255;
  st[20] = (unsigned char*)malloc(sizeof(unsigned char) * 19);
	st[20][0] = 1; st[20][1] = 2; st[20][2] = 18; st[20][3] = 3; st[20][4] = 6; st[20][5] = 3; st[20][6] = 7; st[20][7] = 1; st[20][8] = 5; st[20][9] = 1; st[20][10] = 1; st[20][11] = 1; st[20][12] = 1; st[20][13] = 2; st[20][14] = 3; st[20][15] = 1; st[20][16] = 1; st[20][17] = 1; st[20][18] = 255;
  st[21] = (unsigned char*)malloc(sizeof(unsigned char) * 17);
	st[21][0] = 1; st[21][1] = 2; st[21][2] = 18; st[21][3] = 3; st[21][4] = 7; st[21][5] = 3; st[21][6] = 6; st[21][7] = 1; st[21][8] = 1; st[21][9] = 5; st[21][10] = 1; st[21][11] = 3; st[21][12] = 3; st[21][13] = 2; st[21][14] = 1; st[21][15] = 1; st[21][16] = 255;
  st[22] = (unsigned char*)malloc(sizeof(unsigned char) * 17);
	st[22][0] = 1; st[22][1] = 2; st[22][2] = 18; st[22][3] = 3; st[22][4] = 8; st[22][5] = 3; st[22][6] = 5; st[22][7] = 1; st[22][8] = 1; st[22][9] = 1; st[22][10] = 10; st[22][11] = 2; st[22][12] = 2; st[22][13] = 1; st[22][14] = 255;
  st[23] = (unsigned char*)malloc(sizeof(unsigned char) * 15);
	st[23][0] = 1; st[23][1] = 2; st[23][2] = 18; st[23][3] = 3; st[23][4] = 9; st[23][5] = 3; st[23][6] = 4; st[23][7] = 1; st[23][8] = 1; st[23][9] = 1; st[23][10] = 8; st[23][11] = 3; st[23][12] = 3; st[23][13] = 1; st[23][14] = 255;
  st[24] = (unsigned char*)malloc(sizeof(unsigned char) * 13);
	st[24][0] = 1; st[24][1] = 2; st[24][2] = 18; st[24][3] = 3; st[24][4] = 10; st[24][5] = 3; st[24][6] = 3; st[24][7] = 1; st[24][8] = 1; st[24][9] = 13; st[24][10] = 2; st[24][11] = 1; st[24][12] = 255;
  st[25] = (unsigned char*)malloc(sizeof(unsigned char) * 15);
	st[25][0] = 1; st[25][1] = 2; st[25][2] = 18; st[25][3] = 3; st[25][4] = 11; st[25][5] = 2; st[25][6] = 3; st[25][7] = 1; st[25][8] = 1; st[25][9] = 1; st[25][10] = 12; st[25][11] = 1; st[25][12] = 1; st[25][13] = 1; st[25][14] = 255;
  st[26] = (unsigned char*)malloc(sizeof(unsigned char) * 13);
	st[26][0] = 1; st[26][1] = 2; st[26][2] = 18; st[26][3] = 3; st[26][4] = 16; st[26][5] = 1; st[26][6] = 1; st[26][7] = 1; st[26][8] = 12; st[26][9] = 1; st[26][10] = 1; st[26][11] = 1; st[26][12] = 255;
  st[27] = (unsigned char*)malloc(sizeof(unsigned char) * 13);
	st[27][0] = 1; st[27][1] = 2; st[27][2] = 37; st[27][3] = 1; st[27][4] = 1; st[27][5] = 1; st[27][6] = 7; st[27][7] = 3; st[27][8] = 2; st[27][9] = 1; st[27][10] = 1; st[27][11] = 1; st[27][12] = 255;
  st[28] = (unsigned char*)malloc(sizeof(unsigned char) * 15);
	st[28][0] = 1; st[28][1] = 2; st[28][2] = 37; st[28][3] = 1; st[28][4] = 1; st[28][5] = 6; st[28][6] = 2; st[28][7] = 1; st[28][8] = 1; st[28][9] = 1; st[28][10] = 2; st[28][11] = 1; st[28][12] = 1; st[28][13] = 1; st[28][14] = 255;
  st[29] = (unsigned char*)malloc(sizeof(unsigned char) * 15);
	st[29][0] = 1; st[29][1] = 2; st[29][2] = 37; st[29][3] = 1; st[29][4] = 6; st[29][5] = 1; st[29][6] = 2; st[29][7] = 1; st[29][8] = 1; st[29][9] = 1; st[29][10] = 2; st[29][11] = 1; st[29][12] = 1; st[29][13] = 1; st[29][14] = 255;
  st[30] = (unsigned char*)malloc(sizeof(unsigned char) * 13);
	st[30][0] = 1; st[30][1] = 3; st[30][2] = 36; st[30][3] = 1; st[30][4] = 6; st[30][5] = 1; st[30][6] = 2; st[30][7] = 3; st[30][8] = 2; st[30][9] = 1; st[30][10] = 1; st[30][11] = 1; st[30][12] = 255;
  st[31] = (unsigned char*)malloc(sizeof(unsigned char) * 11);
	st[31][0] = 1; st[31][1] = 4; st[31][2] = 35; st[31][3] = 1; st[31][4] = 6; st[31][5] = 1; st[31][6] = 7; st[31][7] = 1; st[31][8] = 1; st[31][9] = 1; st[31][10] = 255;
  st[32] = (unsigned char*)malloc(sizeof(unsigned char) * 12);
	st[32][0] = 0; st[32][1] = 1; st[32][2] = 4; st[32][3] = 32; st[32][4] = 3; st[32][5] = 6; st[32][6] = 1; st[32][7] = 7; st[32][8] = 1; st[32][9] = 1; st[32][10] = 1; st[32][11] = 255;
  st[33] = (unsigned char*)malloc(sizeof(unsigned char) * 10);
	st[33][0] = 0; st[33][1] = 3; st[33][2] = 3; st[33][3] = 31; st[33][4] = 3; st[33][5] = 1; st[33][6] = 13; st[33][7] = 2; st[33][8] = 1; st[33][9] = 255; 
  st[34] = (unsigned char*)malloc(sizeof(unsigned char) * 14);
	st[34][0] = 0; st[34][1] = 3; st[34][2] = 6; st[34][3] = 25; st[34][4] = 3; st[34][5] = 2; st[34][6] = 1; st[34][7] = 1; st[34][8] = 1; st[34][9] = 12; st[34][10] = 1; st[34][11] = 1; st[34][12] = 1; st[34][13] = 255;
  st[35] = (unsigned char*)malloc(sizeof(unsigned char) * 14);
	st[35][0] = 0; st[35][1] = 5; st[35][2] = 7; st[35][3] = 18; st[35][4] = 7; st[35][5] = 2; st[35][6] = 1; st[35][7] = 1; st[35][8] = 1; st[35][9] = 12; st[35][10] = 1; st[35][11] = 1; st[35][12] = 1; st[35][13] = 255;
  st[36] = (unsigned char*)malloc(sizeof(unsigned char) * 16);
	st[36][0] = 0; st[36][1] = 9; st[36][2] = 6; st[36][3] = 12; st[36][4] = 7; st[36][5] = 5; st[36][6] = 1; st[36][7] = 1; st[36][8] = 1; st[36][9] = 7; st[36][10] = 3; st[36][11] = 2; st[36][12] = 1; st[36][13] = 1; st[36][14] = 1; st[36][15] = 255;
  st[37] = (unsigned char*)malloc(sizeof(unsigned char) * 16);
	st[37][0] = 0; st[37][1] = 13; st[37][2] = 7; st[37][3] = 3; st[37][4] = 7; st[37][5] = 9; st[37][6] = 1; st[37][7] = 1; st[37][8] = 6; st[37][9] = 2; st[37][10] = 1; st[37][11] = 1; st[37][12] = 1; st[37][13] = 2; st[37][14] = 1; st[37][15] = 255;
  st[38] = (unsigned char*)malloc(sizeof(unsigned char) * 16);
	st[38][0] = 0; st[38][1] = 14; st[38][2] = 12; st[38][3] = 13; st[38][4] = 1; st[38][5] = 6; st[38][6] = 1; st[38][7] = 2; st[38][8] = 1; st[38][9] = 1; st[38][10] = 1; st[38][11] = 2; st[38][12] = 1; st[38][13] = 1; st[38][14] = 1; st[38][15] = 255;
  st[39] = (unsigned char*)malloc(sizeof(unsigned char) * 14);
	st[39][0] = 0; st[39][1] = 19; st[39][2] = 5; st[39][3] = 15; st[39][4] = 1; st[39][5] = 6; st[39][6] = 1; st[39][7] = 2; st[39][8] = 3; st[39][9] = 2; st[39][10] = 1; st[39][11] = 1; st[39][12] = 1; st[39][13] = 255;
  st[40] = (unsigned char*)malloc(sizeof(unsigned char) * 10);
	st[40][0] = 0; st[40][1] = 39; st[40][2] = 1; st[40][3] = 6; st[40][4] = 1; st[40][5] = 7; st[40][6] = 1; st[40][7] = 1; st[40][8] = 1; st[40][9] = 255;
  st[41] = (unsigned char*)malloc(sizeof(unsigned char) * 11);
	st[41][0] = 0; st[41][1] = 4; st[41][2] = 14; st[41][3] = 21; st[41][4] = 1; st[41][5] = 6; st[41][6] = 1; st[41][7] = 7; st[41][8] = 1; st[41][9] = 1; st[41][10] = 1; st[41][10] = 255;
  st[42] = (unsigned char*)malloc(sizeof(unsigned char) * 10);
	st[42][0] = 0; st[42][1] = 3; st[42][2] = 16; st[42][3] = 20; st[42][4] = 1; st[42][5] = 1; st[42][6] = 13; st[42][7] = 2; st[42][8] = 1; st[42][9] = 255;
  st[43] = (unsigned char*)malloc(sizeof(unsigned char) * 14);
	st[43][0] = 0; st[43][1] = 2; st[43][2] = 3; st[43][3] = 12; st[43][4] = 3; st[43][5] = 19; st[43][6] = 1; st[43][7] = 1; st[43][8] = 1; st[43][9] = 12; st[43][10] = 1; st[43][11] = 1; st[43][12] = 1; st[43][13] = 255;
  st[44] = (unsigned char*)malloc(sizeof(unsigned char) * 14);
	st[44][0] = 0; st[44][1] = 1; st[44][2] = 3; st[44][3] = 14; st[44][4] = 3; st[44][5] = 18; st[44][6] = 1; st[44][7] = 1; st[44][8] = 1; st[44][9] = 12; st[44][10] = 1; st[44][11] = 1; st[44][12] = 1; st[44][13] = 255;
  st[45] = (unsigned char*)malloc(sizeof(unsigned char) * 18);
	st[45][0] = 0; st[45][1] = 1; st[45][2] = 2; st[45][3] = 2; st[45][4] = 4; st[45][5] = 2; st[45][6] = 5; st[45][7] = 3; st[45][8] = 2; st[45][9] = 18; st[45][10] = 1; st[45][11] = 1; st[45][12] = 7; st[45][13] = 2; st[45][14] = 5; st[45][15] = 1; st[45][16] = 1; st[45][17] = 255;
  st[46] = (unsigned char*)malloc(sizeof(unsigned char) * 22);
	st[46][0] = 0; st[46][1] = 1; st[46][2] = 2; st[46][3] = 1; st[46][4] = 2; st[46][5] = 2; st[46][6] = 1; st[46][7] = 1; st[46][8] = 2; st[46][9] = 4; st[46][10] = 1; st[46][11] = 2; st[46][12] = 2; st[46][13] = 18; st[46][14] = 1; st[46][15] = 7; st[46][16] = 1; st[46][17] = 2; st[46][18] = 1; st[46][19] = 5; st[46][20] = 1; st[46][21] = 255;
  st[47] = (unsigned char*)malloc(sizeof(unsigned char) * 22);
	st[47][0] = 0; st[47][1] = 1; st[47][2] = 2; st[47][3] = 1; st[47][4] = 1; st[47][5] = 3; st[47][6] = 1; st[47][7] = 1; st[47][8] = 1; st[47][9] = 6; st[47][10] = 1; st[47][11] = 1; st[47][12] = 2; st[47][13] = 18; st[47][14] = 1; st[47][15] = 7; st[47][16] = 1; st[47][17] = 2; st[47][18] = 1; st[47][19] = 5; st[47][20] = 1; st[47][21] = 255;
  st[48] = (unsigned char*)malloc(sizeof(unsigned char) * 24);
	st[48][0] = 0; st[48][1] = 1; st[48][2] = 2; st[48][3] = 1; st[48][4] = 1; st[48][5] = 2; st[48][6] = 2; st[48][7] = 1; st[48][8] = 1; st[48][9] = 2; st[48][10] = 2; st[48][11] = 2; st[48][12] = 1; st[48][13] = 1; st[48][14] = 2; st[48][15] = 18; st[48][16] = 1; st[48][17] = 1; st[48][18] = 7; st[48][19] = 2; st[48][20] = 5; st[48][21] = 1; st[48][22] = 1; st[48][23] = 255;
  st[49] = (unsigned char*)malloc(sizeof(unsigned char) * 24);
	st[49][0] = 0; st[49][1] = 1; st[49][2] = 2; st[49][3] = 1; st[49][4] = 1; st[49][5] = 2; st[49][6] = 1; st[49][7] = 2; st[49][8] = 1; st[49][9] = 2; st[49][10] = 2; st[49][11] = 2; st[49][12] = 1; st[49][13] = 1; st[49][14] = 2; st[49][15] = 18; st[49][16] = 1; st[49][17] = 1; st[49][18] = 1; st[49][19] = 12; st[49][20] = 1; st[49][21] = 1; st[49][22] = 1; st[49][23] = 255;
  st[50] = (unsigned char*)malloc(sizeof(unsigned char) * 24);
	st[50][0] = 0; st[50][1] = 1; st[50][2] = 2; st[50][3] = 1; st[50][4] = 1; st[50][5] = 2; st[50][6] = 1; st[50][7] = 2; st[50][8] = 1; st[50][9] = 2; st[50][10] = 2; st[50][11] = 2; st[50][12] = 1; st[50][13] = 1; st[50][14] = 2; st[50][15] = 18; st[50][16] = 1; st[50][17] = 1; st[50][18] = 1; st[50][19] = 12; st[50][20] = 1; st[50][21] = 1; st[50][22] = 1; st[50][23] = 255;
  st[51] = (unsigned char*)malloc(sizeof(unsigned char) * 22);
	st[51][0] = 0; st[51][1] = 1; st[51][2] = 2; st[51][3] = 1; st[51][4] = 1; st[51][5] = 2; st[51][6] = 1; st[51][7] = 2; st[51][8] = 1; st[51][9] = 2; st[51][10] = 2; st[51][11] = 2; st[51][12] = 1; st[51][13] = 1; st[51][14] = 2; st[51][15] = 18; st[51][16] = 1; st[51][17] = 1; st[51][18] = 13; st[51][19] = 2; st[51][20] = 1; st[51][21] = 255;
  st[52] = (unsigned char*)malloc(sizeof(unsigned char) * 28);
	st[52][0] = 0; st[52][1] = 1; st[52][2] = 2; st[52][3] = 1; st[52][4] = 1; st[52][5] = 2; st[52][6] = 1; st[52][7] = 2; st[52][8] = 1; st[52][9] = 2; st[52][10] = 2; st[52][11] = 2; st[52][12] = 1; st[52][13] = 1; st[52][14] = 2; st[52][15] = 18; st[52][16] = 1; st[52][17] = 1; st[52][18] = 1; st[52][19] = 7; st[52][20] = 1; st[52][21] = 1; st[52][22] = 1; st[52][23] = 2; st[52][24] = 1; st[52][25] = 1; st[52][26] = 1; st[52][27] = 255;
  st[53] = (unsigned char*)malloc(sizeof(unsigned char) * 26);
	st[53][0] = 0; st[53][1] = 1; st[53][2] = 2; st[53][3] = 1; st[53][4] = 1; st[53][5] = 3; st[53][6] = 2; st[53][7] = 3; st[53][8] = 1; st[53][9] = 3; st[53][10] = 1; st[53][11] = 1; st[53][12] = 2; st[53][13] = 18; st[53][14] = 1; st[53][15] = 1; st[53][16] = 1; st[53][17] = 7; st[53][18] = 1; st[53][19] = 1; st[53][20] = 1; st[53][21] = 2; st[53][22] = 1; st[53][23] = 1; st[53][24] = 1; st[53][25] = 255;
  st[54] = (unsigned char*)malloc(sizeof(unsigned char) * 18);
	st[54][0] = 0; st[54][1] = 1; st[54][2] = 2; st[54][3] = 1; st[54][4] = 2; st[54][5] = 6; st[54][6] = 2; st[54][7] = 2; st[54][8] = 2; st[54][9] = 1; st[54][10] = 2; st[54][11] = 18; st[54][12] = 1; st[54][13] = 1; st[54][14] = 13; st[54][15] = 2; st[54][16] = 1; st[54][17] = 255;
  st[55] = (unsigned char*)malloc(sizeof(unsigned char) * 20);
	st[55][0] = 0; st[55][1] = 1; st[55][2] = 2; st[55][3] = 2; st[55][4] = 2; st[55][5] = 4; st[55][6] = 1; st[55][7] = 1; st[55][8] = 5; st[55][9] = 1; st[55][10] = 2; st[55][11] = 18; st[55][12] = 1; st[55][13] = 1; st[55][14] = 1; st[55][15] = 12; st[55][16] = 1; st[55][17] = 1; st[55][18] = 1; st[55][19] = 255;
  st[56] = (unsigned char*)malloc(sizeof(unsigned char) * 20);
	st[56][0] = 0; st[56][1] = 1; st[56][2] = 2; st[56][3] = 3; st[56][4] = 6; st[56][5] = 2; st[56][6] = 1; st[56][7] = 2; st[56][8] = 1; st[56][9] = 1; st[56][10] = 2; st[56][11] = 18; st[56][12] = 1; st[56][13] = 1; st[56][14] = 1; st[56][15] = 12; st[56][16] = 1; st[56][17] = 1; st[56][18] = 1; st[56][19] = 255;
  st[57] = (unsigned char*)malloc(sizeof(unsigned char) * 20);
	st[57][0] = 0; st[57][1] = 1; st[57][2] = 2; st[57][3] = 11; st[57][4] = 1; st[57][5] = 2; st[57][6] = 1; st[57][7] = 1; st[57][8] = 2; st[57][9] = 18; st[57][10] = 1; st[57][11] = 1; st[57][12] = 5; st[57][13] = 2; st[57][14] = 4; st[57][15] = 2; st[57][16] = 1; st[57][17] = 1; st[57][18] = 1; st[57][19] = 255;
  st[58] = (unsigned char*)malloc(sizeof(unsigned char) * 22);
	st[58][0] = 0; st[58][1] = 1; st[58][2] = 2; st[58][3] = 1; st[58][4] = 11; st[58][5] = 2; st[58][6] = 1; st[58][7] = 1; st[58][8] = 2; st[58][9] = 18; st[58][10] = 1; st[58][11] = 5; st[58][12] = 1; st[58][13] = 2; st[58][14] = 1; st[58][15] = 2; st[58][16] = 1; st[58][17] = 2; st[58][18] = 1; st[58][19] = 1; st[58][20] = 1; st[58][21] = 255;
  st[59] = (unsigned char*)malloc(sizeof(unsigned char) * 22);
	st[59][0] = 0; st[59][1] = 1; st[59][2] = 2; st[59][3] = 1; st[59][4] = 1; st[59][5] = 12; st[59][6] = 1; st[59][7] = 1; st[59][8] = 2; st[59][9] = 18; st[59][10] = 1; st[59][11] = 3; st[59][12] = 3; st[59][13] = 2; st[59][14] = 1; st[59][15] = 2; st[59][16] = 1; st[59][17] = 2; st[59][18] = 1; st[59][19] = 1; st[59][20] = 1; st[59][21] = 255;
  st[60] = (unsigned char*)malloc(sizeof(unsigned char) * 20);
	st[60][0] = 0; st[60][1] = 1; st[60][2] = 2; st[60][3] = 1; st[60][4] = 1; st[60][5] = 12; st[60][6] = 1; st[60][7] = 1; st[60][8] = 2; st[60][9] = 18; st[60][10] = 1; st[60][11] = 1; st[60][12] = 3; st[60][13] = 5; st[60][14] = 2; st[60][15] = 3; st[60][16] = 1; st[60][17] = 1; st[60][18] = 1; st[60][19] = 255;
  st[61] = (unsigned char*)malloc(sizeof(unsigned char) * 20);
	st[61][0] = 0; st[61][1] = 1; st[61][2] = 2; st[61][3] = 1; st[61][4] = 11; st[61][5] = 2; st[61][6] = 1; st[61][7] = 1; st[61][8] = 2; st[61][9] = 18; st[61][10] = 1; st[61][11] = 1; st[61][12] = 1; st[61][13] = 4; st[61][14] = 1; st[61][15] = 7; st[61][16] = 1; st[61][17] = 1; st[61][18] = 1; st[61][19] = 255;
  st[62] = (unsigned char*)malloc(sizeof(unsigned char) * 22);
	st[62][0] = 0; st[62][1] = 1; st[62][2] = 2; st[62][3] = 11; st[62][4] = 1; st[62][5] = 2; st[62][6] = 1; st[62][7] = 1; st[62][8] = 2; st[62][9] = 18; st[62][10] = 1; st[62][11] = 1; st[62][12] = 1; st[62][13] = 2; st[62][14] = 2; st[62][15] = 1; st[62][16] = 1; st[62][17] = 5; st[62][18] = 1; st[62][19] = 2; st[62][20] = 1; st[62][21] = 255;
  st[63] = (unsigned char*)malloc(sizeof(unsigned char) * 16);
	st[63][0] = 0; st[63][1] = 1; st[63][2] = 2; st[63][3] = 1; st[63][4] = 11; st[63][5] = 2; st[63][6] = 1; st[63][7] = 1; st[63][8] = 2; st[63][9] = 18; st[63][10] = 1; st[63][11] = 1; st[63][12] = 13; st[63][13] = 2; st[63][14] = 1; st[63][15] = 255;
  st[64] = (unsigned char*)malloc(sizeof(unsigned char) * 18);
	st[64][0] = 0; st[64][1] = 1; st[64][2] = 2; st[64][3] = 1; st[64][4] = 1; st[64][5] = 8; st[64][6] = 5; st[64][7] = 1; st[64][8] = 2; st[64][9] = 18; st[64][10] = 1; st[64][11] = 1; st[64][12] = 1; st[64][13] = 12; st[64][14] = 1; st[64][15] = 1; st[64][16] = 1; st[64][17] = 255;
  st[65] = (unsigned char*)malloc(sizeof(unsigned char) * 18);
	st[65][0] = 0; st[65][1] = 1; st[65][2] = 2; st[65][3] = 1; st[65][4] = 1; st[65][5] = 10; st[65][6] = 2; st[65][7] = 2; st[65][8] = 2; st[65][9] = 18; st[65][10] = 1; st[65][11] = 1; st[65][12] = 1; st[65][13] = 12; st[65][14] = 1; st[65][15] = 1; st[65][16] = 1; st[65][17] = 255;
  st[66] = (unsigned char*)malloc(sizeof(unsigned char) * 24);
	st[66][0] = 0; st[66][1] = 1; st[66][2] = 2; st[66][3] = 1; st[66][4] = 5; st[66][5] = 1; st[66][6] = 3; st[66][7] = 3; st[66][8] = 2; st[66][9] = 1; st[66][10] = 2; st[66][11] = 18; st[66][12] = 1; st[66][13] = 1; st[66][14] = 1; st[66][15] = 2; st[66][16] = 3; st[66][17] = 2; st[66][18] = 3; st[66][19] = 2; st[66][20] = 1; st[66][21] = 1; st[66][22] = 1; st[66][23] = 255;
  st[67] = (unsigned char*)malloc(sizeof(unsigned char) * 30);
	st[67][0] = 0; st[67][1] = 1; st[67][2] = 2; st[67][3] = 5; st[67][4] = 1; st[67][5] = 1; st[67][6] = 1; st[67][7] = 1; st[67][8] = 2; st[67][9] = 3; st[67][10] = 1; st[67][11] = 1; st[67][12] = 2; st[67][13] = 18; st[67][14] = 1; st[67][15] = 1; st[67][16] = 1; st[67][17] = 2; st[67][18] = 1; st[67][19] = 1; st[67][20] = 1; st[67][21] = 2; st[67][22] = 1; st[67][23] = 1; st[67][24] = 1; st[67][25] = 2; st[67][26] = 1; st[67][27] = 1; st[67][28] = 1; st[67][29] = 255;
  st[68] = (unsigned char*)malloc(sizeof(unsigned char) * 30);
	st[68][0] = 0; st[68][1] = 1; st[68][2] = 2; st[68][3] = 5; st[68][4] = 1; st[68][5] = 1; st[68][6] = 1; st[68][7] = 2; st[68][8] = 2; st[68][9] = 2; st[68][10] = 1; st[68][11] = 1; st[68][12] = 2; st[68][13] = 18; st[68][14] = 1; st[68][15] = 1; st[68][16] = 1; st[68][17] = 2; st[68][18] = 1; st[68][19] = 1; st[68][20] = 1; st[68][21] = 2; st[68][22] = 1; st[68][23] = 1; st[68][24] = 1; st[68][25] = 2; st[68][26] = 1; st[68][27] = 1; st[68][28] = 1; st[68][29] = 255;
  st[69] = (unsigned char*)malloc(sizeof(unsigned char) * 28);
	st[69][0] = 0; st[69][1] = 1; st[69][2] = 2; st[69][3] = 1; st[69][4] = 5; st[69][5] = 1; st[69][6] = 3; st[69][7] = 3; st[69][8] = 2; st[69][9] = 1; st[69][10] = 2; st[69][11] = 18; st[69][12] = 1; st[69][13] = 1; st[69][14] = 1; st[69][15] = 2; st[69][16] = 1; st[69][17] = 1; st[69][18] = 1; st[69][19] = 2; st[69][20] = 1; st[69][21] = 1; st[69][22] = 1; st[69][23] = 2; st[69][24] = 1; st[69][25] = 1; st[69][26] = 1; st[69][27] = 255;
  st[70] = (unsigned char*)malloc(sizeof(unsigned char) * 28);
	st[70][0] = 0; st[70][1] = 1; st[70][2] = 2; st[70][3] = 1; st[70][4] = 5; st[70][5] = 1; st[70][6] = 3; st[70][7] = 3; st[70][8] = 2; st[70][9] = 1; st[70][10] = 2; st[70][11] = 18; st[70][12] = 1; st[70][13] = 1; st[70][14] = 1; st[70][15] = 2; st[70][16] = 1; st[70][17] = 1; st[70][18] = 1; st[70][19] = 2; st[70][20] = 1; st[70][21] = 1; st[70][22] = 1; st[70][23] = 2; st[70][24] = 1; st[70][25] = 1; st[70][26] = 1; st[70][27] = 255;
  st[71] = (unsigned char*)malloc(sizeof(unsigned char) * 26);
	st[71][0] = 0; st[71][1] = 1; st[71][2] = 2; st[71][3] = 1; st[71][4] = 1; st[71][5] = 10; st[71][6] = 2; st[71][7] =2; st[71][8] = 2; st[71][9] = 18; st[71][10] = 1; st[71][11] = 1; st[71][12] = 1; st[71][13] = 2; st[71][14] = 1; st[71][15] = 1; st[71][16] = 1; st[71][17] = 2; st[71][18] = 1; st[71][19] = 1; st[71][20] = 1; st[71][21] = 2; st[71][22] = 1; st[71][23] = 1; st[71][24] = 1; st[71][25] = 255;
  st[72] = (unsigned char*)malloc(sizeof(unsigned char) * 20);
	st[72][0] = 0; st[72][1] = 1; st[72][2] = 2; st[72][3] = 1; st[72][4] = 1; st[72][5] = 8; st[72][6] = 3; st[72][7] =3; st[72][8] = 2; st[72][9] = 18; st[72][10] = 1; st[72][11] = 1; st[72][12] = 3; st[72][13] = 2; st[72][14] = 3; st[72][15] = 2; st[72][16] = 3; st[72][17] = 2; st[72][18] = 1; st[72][19] = 255;
  st[73] = (unsigned char*)malloc(sizeof(unsigned char) * 12);
	st[73][0] = 0; st[73][1] = 1; st[73][2] = 2; st[73][3] = 1; st[73][4] = 14; st[73][5] = 1; st[73][6] = 2; st[73][7] = 18; st[73][8] = 1; st[73][9] = 16; st[73][10] = 1; st[73][11] = 255;
  st[74] = (unsigned char*)malloc(sizeof(unsigned char) * 14);
	st[74][0] = 0; st[74][1] = 1; st[74][2] = 2; st[74][3] = 1; st[74][4] = 1; st[74][5] = 12; st[74][6] = 1; st[74][7] = 1; st[74][8] = 2; st[74][9] = 18; st[74][10] = 1; st[74][11] = 16; st[74][12] = 1; st[74][13] = 255;
  st[75] = (unsigned char*)malloc(sizeof(unsigned char) * 14);
	st[75][0] = 0; st[75][1] = 1; st[75][2] = 2; st[75][3] = 1; st[75][4] = 1; st[75][5] = 12; st[75][6] = 1; st[75][7] = 1; st[75][8] = 2; st[75][9] = 18; st[75][10] = 1; st[75][11] = 16; st[75][12] = 1; st[75][13] = 255;
  st[76] = (unsigned char*)malloc(sizeof(unsigned char) * 18);
	st[76][0] = 0; st[76][1] = 1; st[76][2] = 2; st[76][3] = 1; st[76][4] = 5; st[76][5] = 2; st[76][6] = 4; st[76][7] = 2; st[76][8] = 1; st[76][9] = 1; st[76][10] = 2; st[76][11] = 18; st[76][12] = 1; st[76][13] = 1; st[76][14] = 14; st[76][15] = 1; st[76][16] = 1; st[76][17] = 255;
  st[77] = (unsigned char*)malloc(sizeof(unsigned char) * 22);
	st[77][0] = 0; st[77][1] = 1; st[77][2] = 2; st[77][3] = 5; st[77][4] = 1; st[77][5] = 2; st[77][6] = 1; st[77][7] = 2; st[77][8] = 1; st[77][9] = 2; st[77][10] = 1; st[77][11] = 1; st[77][12] = 2; st[77][13] = 18; st[77][14] = 1; st[77][15] = 1; st[77][16] = 1; st[77][17] = 12; st[77][18] = 1; st[77][19] = 1; st[77][20] = 1; st[77][21] = 255;
  st[78] = (unsigned char*)malloc(sizeof(unsigned char) * 22);
	st[78][0] = 0; st[78][1] = 1; st[78][2] = 2; st[78][3] = 3; st[78][4] = 3; st[78][5] = 2; st[78][6] = 1; st[78][7] = 2; st[78][8] = 1; st[78][9] = 2; st[78][10] = 1; st[78][11] = 1; st[78][12] = 2; st[78][13] = 18; st[78][14] = 1; st[78][15] = 1; st[78][16] = 1; st[78][17] = 12; st[78][18] = 1; st[78][19] = 1; st[78][20] = 1; st[78][21] = 255;
  st[79] = (unsigned char*)malloc(sizeof(unsigned char) * 20);
	st[79][0] = 0; st[79][1] = 1; st[79][2] = 2; st[79][3] = 1; st[79][4] = 3; st[79][5] = 5; st[79][6] = 2; st[79][7] = 3; st[79][8] = 1; st[79][9] = 1; st[79][10] = 2; st[79][11] = 18; st[79][12] = 1; st[79][13] = 1; st[79][14] = 6; st[79][15] = 2; st[79][16] = 6; st[79][17] = 1; st[79][18] = 1; st[79][19] = 255;
  st[80] = (unsigned char*)malloc(sizeof(unsigned char) * 20);
	st[80][0] = 0; st[80][1] = 1; st[80][2] = 2; st[80][3] = 1; st[80][4] = 1; st[80][5] = 4; st[80][6] = 1; st[80][7] = 6; st[80][8] = 2; st[80][9] = 1; st[80][10] = 2; st[80][11] = 18; st[80][12] = 1; st[80][13] = 5; st[80][14] = 2; st[80][15] = 2; st[80][16] = 2; st[80][17] = 5; st[80][18] = 1; st[80][19] = 255;
  st[81] = (unsigned char*)malloc(sizeof(unsigned char) * 22);
	st[81][0] = 0; st[81][1] = 1; st[81][2] = 2; st[81][3] = 1; st[81][4] = 1; st[81][5] = 3; st[81][6] = 1; st[81][7] = 1; st[81][8] = 1; st[81][9] = 3; st[81][10] = 4; st[81][11] = 1; st[81][12] = 2; st[81][13] = 18; st[81][14] = 1; st[81][15] = 3; st[81][16] = 3; st[81][17] = 4; st[81][18] = 3; st[81][19] = 3; st[81][20] = 1; st[81][21] = 255;
  st[82] = (unsigned char*)malloc(sizeof(unsigned char) * 22);
	st[82][0] = 0; st[82][1] = 1; st[82][2] = 2; st[82][3] = 1; st[82][4] = 1; st[82][5] = 1; st[82][6] = 3; st[82][7] = 1; st[82][8] = 5; st[82][9] = 2; st[82][10] = 1; st[82][11] = 1; st[82][12] = 2; st[82][13] = 18; st[82][14] = 1; st[82][15] = 1; st[82][16] = 3; st[82][17] = 8; st[82][18] = 3; st[82][19] = 1; st[82][20] = 1; st[82][21] = 255;
  st[83] = (unsigned char*)malloc(sizeof(unsigned char) * 22);
	st[83][0] = 0; st[83][1] = 1; st[83][2] = 2; st[83][3] = 1; st[83][4] = 3; st[83][5] = 7; st[83][6] = 1; st[83][7] = 2; st[83][8] = 1; st[83][9] = 1; st[83][10] = 2; st[83][11] = 18; st[83][12] = 1; st[83][13] = 1; st[83][14] = 1; st[83][15] = 5; st[83][16] = 2; st[83][17] = 5; st[83][18] = 1; st[83][19] = 1; st[83][20] = 1; st[83][21] = 255;
  st[84] = (unsigned char*)malloc(sizeof(unsigned char) * 22);
	st[84][0] = 0; st[84][1] = 1; st[84][2] = 2; st[84][3] = 1; st[84][4] = 11; st[84][5] = 2; st[84][6] = 1; st[84][7] = 1; st[84][8] = 2; st[84][9] = 18; st[84][10] = 1; st[84][11] = 1; st[84][12] = 1; st[84][13] = 3; st[84][14] = 2; st[84][15] = 2; st[84][16] = 2; st[84][17] = 3; st[84][18] = 1; st[84][19] = 1; st[84][20] = 1; st[84][21] = 255;
  st[85] = (unsigned char*)malloc(sizeof(unsigned char) * 16);
	st[85][0] = 0; st[85][1] = 1; st[85][2] = 2; st[85][3] = 1; st[85][4] = 1; st[85][5] = 12; st[85][6] = 1; st[85][7] = 1; st[85][8] = 2; st[85][9] = 18; st[85][10] = 1; st[85][11] = 1; st[85][12] = 14; st[85][13] = 1; st[85][14] = 1; st[85][15] = 255;
  st[86] = (unsigned char*)malloc(sizeof(unsigned char) * 18);
	st[86][0] = 0; st[86][1] = 1; st[86][2] = 2; st[86][3] = 1; st[86][4] = 1; st[86][5] = 12; st[86][6] = 1; st[86][7] = 1; st[86][8] = 2; st[86][9] = 18; st[86][10] = 1; st[86][11] = 1; st[86][12] = 1; st[86][13] = 12; st[86][14] = 1; st[86][15] = 1; st[86][16] = 1; st[86][17] = 255;
  st[87] = (unsigned char*)malloc(sizeof(unsigned char) * 18);
	st[87][0] = 0; st[87][1] = 1; st[87][2] = 2; st[87][3] = 1; st[87][4] = 11; st[87][5] = 2; st[87][6] = 1; st[87][7] = 1; st[87][8] = 2; st[87][9] = 18; st[87][10] = 1; st[87][11] = 1; st[87][12] = 1; st[87][13] = 12; st[87][14] = 1; st[87][15] = 1; st[87][16] = 1; st[87][17] = 255;
  st[88] = (unsigned char*)malloc(sizeof(unsigned char) * 18);
	st[88][0] = 0; st[88][1] = 1; st[88][2] = 2; st[88][3] = 11; st[88][4] = 1; st[88][5] = 2; st[88][6] = 1; st[88][7] = 1; st[88][8] = 2; st[88][9] = 18; st[88][10] = 1; st[88][11] = 1; st[88][12] = 9; st[88][13] = 3; st[88][14] = 2; st[88][15] = 1; st[88][16] = 1; st[88][17] = 255;
  st[89] = (unsigned char*)malloc(sizeof(unsigned char) * 18);
	st[89][0] = 0; st[89][1] = 1; st[89][2] = 2; st[89][3] = 11; st[89][4] = 1; st[89][5] = 2; st[89][6] = 1; st[89][7] = 1; st[89][8] = 2; st[89][9] = 18; st[89][10] = 1; st[89][11] = 8; st[89][12] = 1; st[89][13] = 3; st[89][14] = 1; st[89][15] = 3; st[89][16] = 1; st[89][17] = 255;
  st[90] = (unsigned char*)malloc(sizeof(unsigned char) * 16);
	st[90][0] = 0; st[90][1] = 1; st[90][2] = 2; st[90][3] = 11; st[90][4] = 3; st[90][5] = 2; st[90][6] = 2; st[90][7] = 18; st[90][8] = 1; st[90][9] = 7; st[90][10] = 1; st[90][11] = 3; st[90][12] = 1; st[90][13] = 4; st[90][14] = 1; st[90][15] = 255;
  st[91] = (unsigned char*)malloc(sizeof(unsigned char) * 14);
	st[91][0] = 0; st[91][1] = 1; st[91][2] = 3; st[91][3] = 14; st[91][4] = 3; st[91][5] = 18; st[91][6] = 1; st[91][7] = 1; st[91][8] = 6; st[91][9] = 3; st[91][10] = 5; st[91][11] = 1; st[91][12] = 1; st[91][13] = 255;
  st[92] = (unsigned char*)malloc(sizeof(unsigned char) * 14);
	st[92][0] = 0; st[92][1] = 2; st[92][2] = 3; st[92][3] = 12; st[92][4] = 3; st[92][5] = 19; st[92][6] = 1; st[92][7] = 1; st[92][8] = 1; st[92][9] = 12; st[92][10] = 1; st[92][11] = 1; st[92][12] = 1; st[92][13] = 255;
  st[93] = (unsigned char*)malloc(sizeof(unsigned char) * 12);
	st[93][0] = 0; st[93][1] = 3; st[93][2] = 16; st[93][3] = 20; st[93][4] = 1; st[93][5] = 1; st[93][6] = 1; st[93][7] = 12; st[93][8] = 1; st[93][9] = 1; st[93][10] = 1; st[93][11] = 255;
  st[94] = (unsigned char*)malloc(sizeof(unsigned char) * 10);
	st[94][0] = 0; st[94][1] = 4; st[94][2] = 14; st[94][3] = 21; st[94][4] = 1; st[94][5] = 1; st[94][6] = 13; st[94][7] = 2; st[94][8] = 1; st[94][9] = 255;
  st[95] = (unsigned char*)malloc(sizeof(unsigned char) * 13);
	st[95][0] = 0; st[95][1] = 39; st[95][2] = 1; st[95][3] = 1; st[95][4] = 1; st[95][5] = 7; st[95][6] = 1; st[95][7] = 1; st[95][8] = 1; st[95][9] = 2; st[95][10] = 1; st[95][11] = 1; st[95][10] = 1; st[95][11] = 1; st[95][12] = 255;
  st[96] = (unsigned char*)malloc(sizeof(unsigned char) * 13);
	st[96][0] = 0; st[96][1] = 39; st[96][2] = 1; st[96][3] = 1; st[96][4] = 1; st[96][5] = 7; st[96][6] = 1; st[96][7] = 1; st[96][8] = 1; st[96][9] = 2; st[96][10] = 1; st[96][11] = 1; st[96][10] = 1; st[96][11] = 1; st[96][12] = 255;
  st[97] = (unsigned char*)malloc(sizeof(unsigned char) * 8);
	st[97][0] = 0; st[97][1] = 39; st[97][2] = 1; st[97][3] = 1; st[97][4] = 13; st[97][5] = 2; st[97][6] = 1; st[97][7] = 255;
  st[98] = (unsigned char*)malloc(sizeof(unsigned char) * 14);
	st[98][0] = 0; st[98][1] = 25; st[98][2] = 1; st[98][3] = 2; st[98][4] = 1; st[98][5] = 10; st[98][6] = 1; st[98][7] = 2; st[98][8] = 1; st[98][9] = 10; st[98][10] = 1; st[98][11] = 2; st[98][12] = 1; st[98][13] = 255;
  st[99] = (unsigned char*)malloc(sizeof(unsigned char) * 16);
	st[99][0] = 0; st[99][1] = 14; st[99][2] = 6; st[99][3] = 3; st[99][4] = 3; st[99][5] = 2; st[99][6] = 4; st[99][7] = 7; st[99][8] = 1; st[99][9] = 1; st[99][10] = 1; st[99][11] = 12; st[99][12] = 1; st[99][13] = 1; st[99][14] = 1; st[99][15] = 255;
  st[100] = (unsigned char*)malloc(sizeof(unsigned char) *24);
	st[100][0] = 0; st[100][1] = 10; st[100][2] = 5; st[100][3] = 2; st[100][4] = 1; st[100][5] = 1; st[100][6] = 5; st[100][7] = 1; st[100][8] = 1; st[100][9] = 2; st[100][10] = 1; st[100][11] = 3; st[100][12] = 4; st[100][13] = 3; st[100][14] = 1; st[100][15] = 1; st[100][16] = 1; st[100][17] = 2; st[100][18] = 8; st[100][19] = 2; st[100][20] = 1; st[100][21] = 1; st[100][22] = 1; st[100][23] = 255;
  st[101] = (unsigned char*)malloc(sizeof(unsigned char) * 28);
	st[101][0] = 0; st[101][1] = 1; st[101][2] = 2; st[101][3] = 4; st[101][4] = 4; st[101][5] = 6; st[101][6] = 1; st[101][7] = 1; st[101][8] = 5; st[101][9] = 1; st[101][10] = 1; st[101][11] = 2; st[101][12] = 1; st[101][13] = 7; st[101][14] = 1; st[101][15] = 2; st[101][16] = 1; st[101][17] = 1; st[101][18] = 1; st[101][19] = 2; st[101][20] = 1; st[101][21] = 6; st[101][22] = 1; st[101][23] = 2; st[101][24] = 1; st[101][25] = 1; st[101][26] = 1; st[101][27] = 255;
  st[102] = (unsigned char*)malloc(sizeof(unsigned char) * 28);
	st[102][0] = 0; st[102][1] = 1; st[102][2] = 7; st[102][3] = 8; st[102][4] = 1; st[102][5] = 2; st[102][6] = 5; st[102][7] = 1; st[102][8] = 1; st[102][9] = 2; st[102][10] = 1; st[102][11] = 8; st[102][12] = 1; st[102][13] = 1; st[102][14] = 1; st[102][15] = 1; st[102][16] = 1; st[102][17] = 2; st[102][18] = 1; st[102][19] = 1; st[102][20] = 2; st[102][21] = 3; st[102][22] = 1; st[102][23] = 2; st[102][24] = 1; st[102][25] = 1; st[102][26] = 1; st[102][27] = 255;
  st[103] = (unsigned char*)malloc(sizeof(unsigned char) * 28);
	st[103][0] = 1; st[103][1] = 1; st[103][2] = 2; st[103][3] = 1; st[103][4] = 1; st[103][5] = 1; st[103][6] = 10; st[103][7] = 1; st[103][8] = 2; st[103][9] = 5; st[103][10] = 1; st[103][11] = 1; st[103][12] = 2; st[103][13] = 1; st[103][14] = 9; st[103][15] = 2; st[103][16] = 1; st[103][17] = 1; st[103][18] = 2; st[103][19] = 2; st[103][20] = 1; st[103][21] = 1; st[103][22] = 1; st[103][23] = 3; st[103][24] = 2; st[103][25] = 1; st[103][26] = 1; st[103][27] = 255;
  st[104] = (unsigned char*)malloc(sizeof(unsigned char) * 29);
	st[104][0] = 1; st[104][1] = 1; st[104][2] = 2; st[104][3] = 1; st[104][4] = 1; st[104][5] = 1; st[104][6] = 2; st[104][7] = 6; st[104][8] = 2; st[104][9] = 1; st[104][10] = 1; st[104][11] = 6; st[104][12] = 1; st[104][13] = 1; st[104][14] = 2; st[104][15] = 1; st[104][16] = 9; st[104][17] = 2; st[104][18] = 1; st[104][19] = 1; st[104][20] = 5; st[104][21] = 1; st[104][22] = 1; st[104][23] = 1; st[104][24] = 4; st[104][25] = 1; st[104][26] = 1; st[104][27] = 1; st[104][28] = 255;
  st[105] = (unsigned char*)malloc(sizeof(unsigned char) * 28);
	st[105][0] = 0; st[105][1] = 2; st[105][2] = 1; st[105][3] = 2; st[105][4] = 1; st[105][5] = 1; st[105][6] = 7; st[105][7] = 2; st[105][8] = 1; st[105][9] = 1; st[105][10] = 6; st[105][11] = 1; st[105][12] = 1; st[105][13] = 2; st[105][14] = 1; st[105][15] = 10; st[105][16] = 1; st[105][17] = 1; st[105][18] = 1; st[105][19] = 5; st[105][20] = 1; st[105][21] = 1; st[105][22] = 1; st[105][23] = 3; st[105][24] = 1; st[105][25] = 2; st[105][26] = 1; st[105][27] = 255;
  st[106] = (unsigned char*)malloc(sizeof(unsigned char) * 20);
	st[106][0] = 0; st[106][1] = 2; st[106][2] = 1; st[106][3] = 1; st[106][4] = 1; st[106][5] = 10; st[106][6] = 1; st[106][7] = 2; st[106][8] = 6; st[106][9] = 1; st[106][10] = 1; st[106][11] = 2; st[106][12] = 1; st[106][13] = 10; st[106][14] = 1; st[106][15] = 1; st[106][16] = 13; st[106][17] = 2; st[106][18] = 1; st[106][19] = 255;
  st[107] = (unsigned char*)malloc(sizeof(unsigned char) * 22);
	st[107][0] = 0; st[107][1] = 2; st[107][2] = 1; st[107][3] = 1; st[107][4] = 1; st[107][5] = 10; st[107][6] = 1; st[107][7] = 2; st[107][8] = 6; st[107][9] = 1; st[107][10] = 1; st[107][11] = 2; st[107][12] = 1; st[107][13] = 10; st[107][14] = 1; st[107][15] = 1; st[107][16] = 1; st[107][17] = 12; st[107][18] = 1; st[107][19] = 1; st[107][20] = 1; st[107][21] = 255;
  st[108] = (unsigned char*)malloc(sizeof(unsigned char) * 22);
	st[108][0] = 0; st[108][1] = 2; st[108][2] = 1; st[108][3] = 1; st[108][4] = 1; st[108][5] = 10; st[108][6] = 1; st[108][7] = 1; st[108][8] = 7; st[108][9] = 1; st[108][10] = 1; st[108][11] = 2; st[108][12] = 1; st[108][13] = 10; st[108][14] = 1; st[108][15] = 1; st[108][16] = 1; st[108][17] = 12; st[108][18] = 1; st[108][19] = 1; st[108][20] = 1; st[108][21] = 255;
  st[109] = (unsigned char*)malloc(sizeof(unsigned char) * 24);
	st[109][0] = 0; st[109][1] = 2; st[109][2] = 1; st[109][3] = 1; st[109][4] = 1; st[109][5] = 2; st[109][6] = 5; st[109][7] = 2; st[109][8] = 1; st[109][9] = 2; st[109][10] = 7; st[109][11] = 1; st[109][12] = 1; st[109][13] = 2; st[109][14] = 1; st[109][15] = 10; st[109][16] = 1; st[109][17] = 1; st[109][18] = 7; st[109][19] = 2; st[109][20] = 5; st[109][21] = 1; st[109][22] = 1; st[109][23] = 255;
  st[110] = (unsigned char*)malloc(sizeof(unsigned char) * 24);
	st[110][0] = 0; st[110][1] = 1; st[110][2] = 1; st[110][3] = 2; st[110][4] = 1; st[110][5] = 1; st[110][6] = 6; st[110][7] = 2; st[110][8] = 1; st[110][9] = 2; st[110][10] = 7; st[110][11] = 1; st[110][12] = 4; st[110][13] = 2; st[110][14] = 4; st[110][15] = 4; st[110][16] = 1; st[110][17] = 7; st[110][18] = 1; st[110][19] = 2; st[110][20] = 1; st[110][21] = 5; st[110][22] = 1; st[110][23] = 255;
  st[111] = (unsigned char*)malloc(sizeof(unsigned char) * 26);
	st[111][0] = 0; st[111][1] = 1; st[111][2] = 1; st[111][3] = 1; st[111][4] = 1; st[111][5] = 10; st[111][6] = 1; st[111][7] = 1; st[111][8] = 8; st[111][9] = 1; st[111][10] = 1; st[111][11] = 2; st[111][12] = 1; st[111][13] = 2; st[111][14] = 1; st[111][15] = 3; st[111][16] = 2; st[111][17] = 2; st[111][18] = 1; st[111][19] = 7; st[111][20] = 1; st[111][21] = 2; st[111][22] = 1; st[111][23] = 5; st[111][24] = 1; st[111][25] = 255;
  st[112] = (unsigned char*)malloc(sizeof(unsigned char) * 23);
	st[112][0] = 1; st[112][1] = 1; st[112][2] = 2; st[112][3] = 1; st[112][4] = 10; st[112][5] = 1; st[112][6] = 1; st[112][7] = 8; st[112][8] = 1; st[112][9] = 1; st[112][10] = 2; st[112][11] = 1; st[112][12] = 2; st[112][13] = 1; st[112][14] = 7; st[112][15] = 1; st[112][16] = 1; st[112][17] = 7; st[112][18] = 2; st[112][19] = 5; st[112][20] = 1; st[112][21] = 1; st[112][22] = 255;
  st[113] = (unsigned char*)malloc(sizeof(unsigned char) * 21);
	st[113][0] = 1; st[113][1] = 1; st[113][2] = 2; st[113][3] = 11; st[113][4] = 2; st[113][5] = 8; st[113][6] = 1; st[113][7] = 1; st[113][8] = 2; st[113][9] = 1; st[113][10] = 3; st[113][11] = 2; st[113][12] = 5; st[113][13] = 1; st[113][14] = 1; st[113][15] = 1; st[113][16] = 12; st[113][17] = 1; st[113][18] = 1; st[113][19] = 1; st[113][20] = 255;
  st[114] = (unsigned char*)malloc(sizeof(unsigned char) * 19);
	st[114][0] = 1; st[114][1] = 1; st[114][2] = 15; st[114][3] = 8; st[114][4] = 1; st[114][5] = 1; st[114][6] = 2; st[114][7] = 1; st[114][8] = 5; st[114][9] = 2; st[114][10] = 3; st[114][11] = 1; st[114][12] = 1; st[114][13] = 1; st[114][14] = 12; st[114][15] = 1; st[114][16] = 1; st[114][17] = 1; st[114][18] = 255;
  st[115] = (unsigned char*)malloc(sizeof(unsigned char) * 19);
	st[115][0] = 1; st[115][1] = 1; st[115][2] = 2; st[115][3] = 11; st[115][4] = 2; st[115][5] = 8; st[115][6] = 1; st[115][7] = 1; st[115][8] = 2; st[115][9] = 1; st[115][10] = 7; st[115][11] = 1; st[115][12] = 2; st[115][13] = 1; st[115][14] = 1; st[115][15] = 14; st[115][16] = 1; st[115][17] = 1; st[115][18] = 255;
  st[116] = (unsigned char*)malloc(sizeof(unsigned char) * 21);
	st[116][0] = 1; st[116][1] = 1; st[116][2] = 2; st[116][3] = 1; st[116][4] = 10; st[116][5] = 1; st[116][6] = 1; st[116][7] = 8; st[116][8] = 1; st[116][9] = 1; st[116][10] = 2; st[116][11] = 1; st[116][12] = 10; st[116][13] = 1; st[116][14] = 11; st[116][15] = 1; st[116][16] = 2; st[116][17] = 1; st[116][18] = 1; st[116][19] = 1; st[116][20] = 255;
  st[117] = (unsigned char*)malloc(sizeof(unsigned char) * 22);
	st[117][0] = 0; st[117][1] = 1; st[117][2] = 1; st[117][3] = 1; st[117][4] = 1; st[117][5] = 10; st[117][6] = 1; st[117][7] = 1; st[117][8] = 8; st[117][9] = 1; st[117][10] = 1; st[117][11] = 2; st[117][12] = 1; st[117][13] = 10; st[117][14] = 1; st[117][15] = 11; st[117][16] = 1; st[117][17] = 2; st[117][18] = 1; st[117][19] = 1; st[117][20] = 1; st[117][21] = 255;
  st[118] = (unsigned char*)malloc(sizeof(unsigned char) * 22);
	st[118][0] = 0; st[118][1] = 1; st[118][2] = 1; st[118][3] = 2; st[118][4] = 1; st[118][5] = 9; st[118][6] = 1; st[118][7] = 2; st[118][8] = 7; st[118][9] = 1; st[118][10] = 1; st[118][11] = 2; st[118][12] = 1; st[118][13] = 10; st[118][14] = 1; st[118][15] = 1; st[118][16] = 11; st[118][17] = 2; st[118][18] = 1; st[118][19] = 1; st[118][20] = 1; st[118][21] = 255;
  st[119] = (unsigned char*)malloc(sizeof(unsigned char) * 24);
	st[119][0] = 0; st[119][1] = 2; st[119][2] = 1; st[119][3] = 1; st[119][4] = 1; st[119][5] = 1; st[119][6] = 6; st[119][7] = 2; st[119][8] = 1; st[119][9] = 2; st[119][10] = 7; st[119][11] = 1; st[119][12] = 1; st[119][13] = 2; st[119][14] = 1; st[119][15] = 10; st[119][16] = 1; st[119][17] = 1; st[119][18] = 1; st[119][19] = 12; st[119][20] = 1; st[119][21] = 1; st[119][22] = 1; st[119][23] = 255;
  st[120] = (unsigned char*)malloc(sizeof(unsigned char) * 24);
	st[120][0] = 0; st[120][1] = 2; st[120][2] = 1; st[120][3] = 1; st[120][4] = 1; st[120][5] = 2; st[120][6] = 5; st[120][7] = 3; st[120][8] = 1; st[120][9] = 1; st[120][10] = 7; st[120][11] = 1; st[120][12] = 1; st[120][13] = 2; st[120][14] = 1; st[120][15] = 10; st[120][16] = 1; st[120][17] = 1; st[120][18] = 1; st[120][19] = 12; st[120][20] = 1; st[120][21] = 1; st[120][22] = 1;st[120][23] = 255;
  st[121] = (unsigned char*)malloc(sizeof(unsigned char) * 22);
	st[121][0] = 0; st[121][1] = 2; st[121][2] = 1; st[121][3] = 1; st[121][4] = 1; st[121][5] = 10; st[121][6] = 1; st[121][7] = 2; st[121][8] = 6; st[121][9] = 1; st[121][10] = 1; st[121][11] = 2; st[121][12] = 1; st[121][13] = 10; st[121][14] = 1; st[121][15] = 1; st[121][16] = 11; st[121][17] = 2; st[121][18] = 1; st[121][19] = 1; st[121][20] = 1; st[121][21] = 255;
  st[122] = (unsigned char*)malloc(sizeof(unsigned char) * 22);
	st[122][0] = 0; st[122][1] = 2; st[122][2] = 1; st[122][3] = 1; st[122][4] = 1; st[122][5] = 10; st[122][6] = 1; st[122][7] = 2; st[122][8] = 6; st[122][9] = 1; st[122][10] = 1; st[122][11] = 2; st[122][12] = 1; st[122][13] = 10; st[122][14] = 1; st[122][15] = 11; st[122][16] = 1; st[122][17] = 2; st[122][18] = 1; st[122][19] = 1; st[122][20] = 1; st[122][21] = 255;
  st[123] = (unsigned char*)malloc(sizeof(unsigned char) * 22);
	st[123][0] = 0; st[123][1] = 2; st[123][2] = 1; st[123][3] = 1; st[123][4] = 1; st[123][5] = 11; st[123][6] = 1; st[123][7] = 1; st[123][8] = 6; st[123][9] = 1; st[123][10] = 1; st[123][11] = 2; st[123][12] = 1; st[123][13] = 10; st[123][14] = 1; st[123][15] = 11; st[123][16] = 1; st[123][17] = 2; st[123][18] = 1; st[123][19] = 1; st[123][20] = 1; st[123][21] = 255;
  st[124] = (unsigned char*)malloc(sizeof(unsigned char) * 22);
	st[124][0] = 0; st[124][1] = 2; st[124][2] = 1; st[124][3] = 1; st[124][4] = 1; st[124][5] = 2; st[124][6] = 7; st[124][7] = 2; st[124][8] = 1; st[124][9] = 1; st[124][10] = 6; st[124][11] = 1; st[124][12] = 1; st[124][13] = 2; st[124][14] = 3; st[124][15] = 8; st[124][16] = 1; st[124][17] = 11; st[124][18] = 4; st[124][19] = 1; st[124][20] = 1; st[124][21] = 255;
  st[125] = (unsigned char*)malloc(sizeof(unsigned char) * 20);
	st[125][0] = 0; st[125][1] = 2; st[125][2] = 1; st[125][3] = 1; st[125][4] = 1; st[125][5] = 3; st[125][6] = 6; st[125][7] = 2; st[125][8] = 1; st[125][9] = 2; st[125][10] = 5; st[125][11] = 1; st[125][12] = 1; st[125][13] = 4; st[125][14] = 1; st[125][15] = 8; st[125][16] = 1; st[125][17] = 16; st[125][18] = 1; st[125][19] = 255;
  st[126] = (unsigned char*)malloc(sizeof(unsigned char) * 16);
	st[126][0] = 0; st[126][1] = 2; st[126][2] = 1; st[126][3] = 2; st[126][4] = 1; st[126][5] = 10; st[126][6] = 1; st[126][7] = 2; st[126][8] = 5; st[126][9] = 1; st[126][10] = 1; st[126][11] = 4; st[126][12] = 1; st[126][13] = 8; st[126][14] = 18; st[126][15] = 255;
  st[127] = (unsigned char*)malloc(sizeof(unsigned char) * 14);
	st[127][0] = 0; st[127][1] = 3; st[127][2] = 1; st[127][3] = 1; st[127][4] = 1; st[127][5] = 11; st[127][6] = 1; st[127][7] = 2; st[127][8] = 4; st[127][9] = 1; st[127][10] = 3; st[127][11] = 2; st[127][12] = 11; st[127][13] = 255;
  st[128] = nullptr;
  return st;
}
unsigned char** getgeist() {  // sprite für den Geist
  unsigned char** ghost = (unsigned char**)malloc(11 * sizeof(unsigned char*));
  ghost[0] = (unsigned char*)malloc(4 * sizeof(unsigned char));ghost[0][0] = 0;
  ghost[0][1] = 3;  ghost[0][2] = 5;ghost[0][3] = 255;
  ghost[1] = (unsigned char*)malloc(6 * sizeof(unsigned char));
  ghost[1][0] = 0;  ghost[1][1] = 2;  ghost[1][2] = 2;ghost[1][3] = 4;ghost[1][4] = 1;ghost[1][5] = 255;
  ghost[2] = (unsigned char*)malloc(9 * sizeof(unsigned char));
  ghost[2][0] = 0;ghost[2][1] = 1;ghost[2][2] = 2;ghost[2][3] = 2;ghost[2][4] = 2;ghost[2][5] = 2;ghost[2][6] = 1;ghost[2][7] = 1;ghost[2][8] = 255;
  ghost[3] = (unsigned char*)malloc(7 * sizeof(unsigned char));
  ghost[3][0] = 1;ghost[3][1] = 1;ghost[3][2] = 5;ghost[3][3] = 2;ghost[3][4] = 1;ghost[3][5] = 1;ghost[3][6] = 255;
  ghost[4] = (unsigned char*)malloc(5 * sizeof(unsigned char));
  ghost[4][0] = 1;ghost[4][1] = 3;ghost[4][2] = 6;ghost[4][3] = 1;ghost[4][4] = 255;
  ghost[5] = (unsigned char*)malloc(7 * sizeof(unsigned char));
  ghost[5][0] = 1;ghost[5][1] = 1;ghost[5][2] = 3;ghost[5][3] = 1;ghost[5][4] = 4;ghost[5][5] = 1;ghost[5][6] = 255;
  ghost[6] = (unsigned char*)malloc(7 * sizeof(unsigned char));
  ghost[6][0] = 1;ghost[6][1] = 3;ghost[6][2] = 3;ghost[6][3] = 2;ghost[6][4] = 1;ghost[6][5] = 1;ghost[6][6] = 255;
  ghost[7] = (unsigned char*)malloc(7 * sizeof(unsigned char));
  ghost[7][0] = 1;ghost[7][1] = 1;ghost[7][2] = 4;ghost[7][3] = 2;ghost[7][4] = 1;ghost[7][5] = 1;ghost[7][6] = 255;
  ghost[8] = (unsigned char*)malloc(6 * sizeof(unsigned char));
  ghost[8][0] = 0; ghost[8][1] = 1;ghost[8][2] = 2;ghost[8][3] = 4;ghost[8][4] = 1;ghost[8][5] = 255;
  ghost[9] = (unsigned char*)malloc(4 * sizeof(unsigned char));
  ghost[9][0] = 0;ghost[9][1] = 2;ghost[9][2] = 5;ghost[9][3] = 255;
  ghost[10] = nullptr;
  return ghost;
}
unsigned char** getflipedgeist() {
  unsigned char** flipedgeist = getgeist();
  unsigned char* tmp;
  for (char i = 0; i < 5; i++) {
    tmp = flipedgeist[i];
    flipedgeist[i] = flipedgeist[9 - i];
    flipedgeist[9 - i] = tmp;
  }
  return flipedgeist;
}
unsigned char** getslime() {
  unsigned char** slime = (unsigned char**)malloc(11 * sizeof(unsigned char*));
  slime[0] = (unsigned char*)malloc(4 * sizeof(unsigned char));
  slime[0][0] = 0;slime[0][1] = 1;slime[0][2] = 3;slime[0][3] = 255;
  slime[1] = (unsigned char*)malloc(7 * sizeof(unsigned char));
  slime[1][0] = 1;slime[1][1] = 1;slime[1][2] = 1;slime[1][3] = 1;slime[1][4] = 1;slime[1][5] = 1;slime[1][6] = 255;
  slime[2] = (unsigned char*)malloc(5 * sizeof(unsigned char));
  slime[2][0] = 1;slime[2][1] = 1;slime[2][2] = 1;slime[2][3] = 3;slime[2][4] = 255;
  slime[3] = (unsigned char*)malloc(5 * sizeof(unsigned char));
  slime[3][0] = 1;slime[3][1] = 2;slime[3][2] = 2;slime[3][3] = 1;slime[3][4] = 255;
  slime[4] = slime[2];
  slime[5] = slime[3];
  slime[6] = (unsigned char*)malloc(5 * sizeof(unsigned char));
  slime[6][0] = 1;slime[6][1] = 1;slime[6][2] = 1;slime[6][3] = 2;slime[6][4] = 255;
  slime[7] = (unsigned char*)malloc(5 * sizeof(unsigned char));
  slime[7][0] = 1;slime[7][1] = 1;slime[7][2] = 1;slime[7][3] = 1;slime[7][4] = 255;
  slime[8] = (unsigned char*)malloc(3 * sizeof(unsigned char));
  slime[8][0] = 1;slime[8][1] = 2;slime[8][2] = 255;
  slime[9] = (unsigned char*)malloc(3 * sizeof(unsigned char));
  slime[9][0] = 1;slime[9][1] = 1;slime[9][2] = 255;
  slime[10] = nullptr;
  return slime;
}
unsigned char** getflipedslime() {
  unsigned char** flipedslime = getslime();
  unsigned char* tmp;
  for (char i = 0; i < 5; i++) {
    tmp = flipedslime[i];
    flipedslime[i] = flipedslime[9 - i];
    flipedslime[9 - i] = tmp;
  }
  return flipedslime;
}
unsigned char** getGaO() { // sprite für den spielercharkter 
	unsigned char** GaO = (unsigned char**)malloc(sizeof(unsigned char*) * 129);
	GaO[0] = (unsigned char*)malloc(sizeof(unsigned char) * 3);
	GaO[0][0] = 1; GaO[0][1] = 64; GaO[0][2] = 255;
  GaO[1] = GaO[0];
	GaO[2] = GaO[0];
	GaO[3] = GaO[0];
	GaO[4] = GaO[0];
	GaO[5] = GaO[0];
  GaO[6] = (unsigned char*)malloc(sizeof(unsigned char) * 5);
	GaO[6][0] = 1; GaO[6][1] = 22; GaO[6][2] = 18; GaO[6][3] = 24; GaO[6][4] = 255;
	GaO[7] = GaO[6];
  GaO[8] = (unsigned char*)malloc(sizeof(unsigned char) * 5);
	GaO[8][0] = 1; GaO[8][1] = 20; GaO[8][2] = 22; GaO[8][3] = 22; GaO[8][4] = 255;
	GaO[9] = GaO[8];
  GaO[10] = (unsigned char*)malloc(sizeof(unsigned char) * 7);
	GaO[10][0] = 1; GaO[10][1] = 20; GaO[10][2] = 4; GaO[10][3] = 14; GaO[10][4] = 4; GaO[10][5] = 22; GaO[10][6] = 255;
	GaO[11] = GaO[10];
	GaO[12] = GaO[10];
  GaO[13] = (unsigned char*)malloc(sizeof(unsigned char) * 9);
	GaO[13][0] = 1; GaO[13][1] = 20; GaO[13][2] = 4; GaO[13][3] = 3; GaO[13][4] = 4; GaO[13][5] = 7; GaO[13][6] = 4; GaO[13][7] = 22; GaO[13][8] = 255;
	GaO[14] = GaO[13];
  GaO[15] = (unsigned char*)malloc(sizeof(unsigned char) * 7);
	GaO[15][0] = 1; GaO[15][1] = 20; GaO[15][2] = 11; GaO[15][3] = 4; GaO[15][4] = 7; GaO[15][5] = 22; GaO[15][6] = 255;
	GaO[16] = GaO[15];
  GaO[17] = (unsigned char*)malloc(sizeof(unsigned char) * 7);
	GaO[17][0] = 1; GaO[17][1] = 22; GaO[17][2] = 9; GaO[17][3] = 4; GaO[17][4] = 5; GaO[17][5] = 24; GaO[17][6] = 255;
	GaO[18] = GaO[0];
  GaO[19] = (unsigned char*)malloc(sizeof(unsigned char) * 5);
	GaO[19][0] = 1; GaO[19][1] = 20; GaO[19][2] = 15; GaO[19][3] = 29; GaO[19][4] = 255;
  GaO[20] = (unsigned char*)malloc(sizeof(unsigned char) * 5);
	GaO[20][0] = 1; GaO[20][1] = 20; GaO[20][2] = 18; GaO[20][3] = 26; GaO[20][4] = 255;
	GaO[21] = GaO[20];
  GaO[22] = (unsigned char*)malloc(sizeof(unsigned char) * 7);
	GaO[22][0] = 1; GaO[22][1] = 27; GaO[22][2] = 4; GaO[22][3] = 4; GaO[22][4] = 5; GaO[22][5] = 24; GaO[22][6] = 255;
  GaO[23] = (unsigned char*)malloc(sizeof(unsigned char) * 7);
	GaO[23][0] = 1; GaO[23][1] = 27; GaO[23][2] = 4; GaO[23][3] = 5; GaO[23][4] = 6; GaO[23][5] = 22; GaO[23][6] = 255;
  GaO[24] = (unsigned char*)malloc(sizeof(unsigned char) * 7);
	GaO[24][0] = 1; GaO[24][1] = 27; GaO[24][2] = 4; GaO[24][3] = 6; GaO[24][4] = 5; GaO[24][5] = 22; GaO[24][6] = 255;
	GaO[25] = GaO[24];
	GaO[26] = GaO[24];
	GaO[27] = GaO[23];
	GaO[28] = GaO[22];
	GaO[29] = GaO[20];
	GaO[30] = GaO[20];
	GaO[31] = GaO[19];
	GaO[32] = GaO[0];
	GaO[33] = GaO[8];
	GaO[34] = GaO[8];
	GaO[35] = GaO[8];
  GaO[36] = (unsigned char*)malloc(sizeof(unsigned char) * 5);
	GaO[36][0] = 1; GaO[36][1] = 36; GaO[36][2] = 4; GaO[36][3] = 24; GaO[36][4] = 255;
	GaO[37] = GaO[36];
  GaO[38] = (unsigned char*)malloc(sizeof(unsigned char) * 5);
	GaO[38][0] = 1; GaO[38][1] = 34; GaO[38][2] = 4; GaO[38][3] = 26; GaO[38][4] = 255;
  GaO[39] = (unsigned char*)malloc(sizeof(unsigned char) * 5);
	GaO[39][0] = 1; GaO[39][1] = 32; GaO[39][2] = 4; GaO[39][3] = 28; GaO[39][4] = 255;
	GaO[40] = GaO[39];
	GaO[41] = GaO[38];
	GaO[42] = GaO[36];
	GaO[43] = GaO[36];
	GaO[44] = GaO[8];
	GaO[45] = GaO[8];
	GaO[46] = GaO[8];
	GaO[47] = GaO[0];
	GaO[48] = GaO[8];
	GaO[49] = GaO[8];
	GaO[50] = GaO[8];
  GaO[51] = (unsigned char*)malloc(sizeof(unsigned char) * 9);
	GaO[51][0] = 1; GaO[51][1] = 20; GaO[51][2] = 4; GaO[51][3] = 5; GaO[51][4] = 4; GaO[51][5] = 5; GaO[51][6] = 4; GaO[51][7] = 22; GaO[51][8] = 255;
	GaO[52] = GaO[51];
	GaO[53] = GaO[51];
	GaO[54] = GaO[51];
	GaO[55] = GaO[51];
	GaO[56] = GaO[51];
	GaO[57] = GaO[51];
	GaO[58] = GaO[51];
	GaO[59] = GaO[51];
	GaO[60] = GaO[0];
	GaO[61] = GaO[0];
	GaO[62] = GaO[0];
	GaO[63] = GaO[0];
	GaO[64] = GaO[0];
	GaO[65] = GaO[0];
	GaO[66] = GaO[0];
  GaO[67] = (unsigned char*)malloc(sizeof(unsigned char) * 5);
	GaO[67][0] = 1; GaO[67][1] = 23; GaO[67][2] = 16; GaO[67][3] = 25; GaO[67][4] = 255;
  GaO[68] = (unsigned char*)malloc(sizeof(unsigned char) * 5);
	GaO[68][0] = 1; GaO[68][1] = 21; GaO[68][2] = 18; GaO[68][3] = 25; GaO[68][4] = 255;
  GaO[69] = (unsigned char*)malloc(sizeof(unsigned char) * 5);
	GaO[69][0] = 1; GaO[69][1] = 21; GaO[69][2] = 20; GaO[69][3] = 23; GaO[69][4] = 255;
  GaO[70] = (unsigned char*)malloc(sizeof(unsigned char) * 7);
	GaO[70][0] = 1; GaO[70][1] = 20; GaO[70][2] = 5; GaO[70][3] = 11; GaO[70][4] = 5; GaO[70][5] = 23; GaO[70][6] = 255;
  GaO[71] = (unsigned char*)malloc(sizeof(unsigned char) * 7);
	GaO[71][0] = 1; GaO[71][1] = 20; GaO[71][2] = 5; GaO[71][3] = 11; GaO[71][4] = 6; GaO[71][5] = 22; GaO[71][6] = 255;
  GaO[72] = (unsigned char*)malloc(sizeof(unsigned char) * 7);
	GaO[72][0] = 1; GaO[72][1] = 20; GaO[72][2] = 3; GaO[72][3] = 15; GaO[72][4] = 4; GaO[72][5] = 22; GaO[72][6] = 255;
	GaO[73] = GaO[72];
	GaO[74] = GaO[72];
	GaO[75] = GaO[71];
	GaO[76] = GaO[70];
 	GaO[77] = GaO[69];
 	GaO[78] = GaO[68];
 	GaO[79] = GaO[67];
 	GaO[80] = GaO[0];
  GaO[81] = (unsigned char*)malloc(sizeof(unsigned char) * 5);
	GaO[81][0] = 1; GaO[81][1] = 37; GaO[81][2] = 4; GaO[81][3] = 23; GaO[81][4] = 255;
	GaO[82] = GaO[81];
  GaO[83] = (unsigned char*)malloc(sizeof(unsigned char) * 5);
	GaO[83][0] = 1; GaO[83][1] = 32; GaO[83][2] = 9; GaO[83][3] = 23; GaO[83][4] = 255;
  GaO[84] = (unsigned char*)malloc(sizeof(unsigned char) * 5);
	GaO[84][0] = 1; GaO[84][1] = 26; GaO[84][2] = 11; GaO[84][3] = 27; GaO[84][4] = 255;
	GaO[85] = GaO[84];
  GaO[86] = (unsigned char*)malloc(sizeof(unsigned char) * 5);
	GaO[86][0] = 1; GaO[86][1] = 22; GaO[86][2] = 10; GaO[86][3] = 32; GaO[86][4] = 255;
  GaO[87] = (unsigned char*)malloc(sizeof(unsigned char) * 5);
	GaO[87][0] = 1; GaO[87][1] = 20; GaO[87][2] = 8; GaO[87][3] = 36; GaO[87][4] = 255;
	GaO[88] = GaO[87];
	GaO[89] = GaO[86];
	GaO[90] = GaO[84];
	GaO[91] = GaO[84];
	GaO[92] = GaO[83];
	GaO[93] = GaO[81];
	GaO[94] = GaO[81];
	GaO[95] = GaO[0];
	GaO[96] = GaO[8];
	GaO[97] = GaO[8];
	GaO[98] = GaO[8];
	GaO[99] = GaO[51];
	GaO[100] = GaO[51];
	GaO[101] = GaO[51];
	GaO[102] = GaO[51];
	GaO[103] = GaO[51];
	GaO[104] = GaO[51];
	GaO[105] = GaO[51];
	GaO[106] = GaO[51];
	GaO[107] = GaO[51];
	GaO[108] = GaO[0];
	GaO[109] = GaO[8];
	GaO[110] = GaO[8];
	GaO[111] = GaO[8];
  GaO[112] = (unsigned char*)malloc(sizeof(unsigned char) * 7);
	GaO[112][0] = 1; GaO[112][1] = 27; GaO[112][2] = 3; GaO[112][3] = 7; GaO[112][4] = 4; GaO[112][5] = 22; GaO[112][6] = 255;
	GaO[113] = GaO[112];
	GaO[114] = GaO[112];
  GaO[115] = (unsigned char*)malloc(sizeof(unsigned char) * 7);
	GaO[115][0] = 1; GaO[115][1] = 24; GaO[115][2] = 6; GaO[115][3] = 7; GaO[115][4] = 4; GaO[115][5] = 23; GaO[115][6] = 255;
	GaO[116] = GaO[115];
  GaO[117] = (unsigned char*)malloc(sizeof(unsigned char) * 7);
	GaO[117][0] = 1; GaO[117][1] = 22; GaO[117][2] = 10; GaO[117][3] = 3; GaO[117][4] = 6; GaO[117][5] = 23; GaO[117][6] = 255;
	GaO[118] = GaO[117];
  GaO[119] = (unsigned char*)malloc(sizeof(unsigned char) * 7);
	GaO[119][0] = 1; GaO[119][1] = 20; GaO[119][2] = 6; GaO[119][3] = 3; GaO[119][4] = 11; GaO[119][5] = 24; GaO[119][6] = 255;
	GaO[120] = GaO[119];
  GaO[121] = (unsigned char*)malloc(sizeof(unsigned char) * 7);
	GaO[121][0] = 1; GaO[121][1] = 20; GaO[121][2] = 3; GaO[121][3] = 8; GaO[121][4] = 7; GaO[121][5] = 26; GaO[121][6] = 255;
	GaO[122] = GaO[121];
	GaO[123] = GaO[0];
	GaO[124] = GaO[0];
	GaO[125] = GaO[0];
	GaO[126] = GaO[0];
	GaO[127] = GaO[0];
  GaO[128] = nullptr;
  return GaO;
}
void rremove(unsigned char pos, unsigned char** cords, unsigned char** hitboxes, unsigned char* objectprops) {
  //loscht ein element aus den arrays
  unsigned char lenght = 0;
  while (objectprops[lenght] != 255) {
    lenght++;
  }
  if(objectprops[pos]!= 255){
    cords[pos][0] = cords[lenght - 1][0];
    cords[pos][1] = cords[lenght - 1][1]; 
    cords[lenght - 1][0] = 255;
    cords[lenght - 1][1] = 255;
    hitboxes[pos][0] = hitboxes[lenght - 1][0];
    hitboxes[pos][1] = hitboxes[lenght - 1][1];
    hitboxes[pos][2] = hitboxes[lenght - 1][2];
    hitboxes[pos][3] = hitboxes[lenght - 1][3];
    hitboxes[pos][4] = hitboxes[lenght - 1][4];
    hitboxes[lenght - 1][0] = 255;
    hitboxes[lenght - 1][1] = 255;
    hitboxes[lenght - 1][2] = 255;
    hitboxes[lenght - 1][3] = 255;
    hitboxes[lenght - 1][4] = 0;
    objectprops[pos] = objectprops[lenght - 1];
    objectprops[lenght - 1] = 255;
  }
}
unsigned char*** getobjectarray() {  // initialisirung für den array indem die Sprits gespeichert werden
  //die sprits werden in einem jeweils zwei dimmensionallen array gespeichert welche in objectarray gespeichert werden.
  //die erste dimmension ist die Y position im sprite
  //in der zweiten dimension wird zu erst ob ein pixelvorhanden ist oder nicht anngegeben dannach wird angegeben wie lange die serie der an bzw. ausen Pixel ist
  unsigned char*** objectarray = (unsigned char***)malloc(64 * sizeof(unsigned char**));
  for (int i = 0; i < 64; i++) {
    objectarray[i] = nullptr;
  }
  return objectarray;
}
unsigned char** gethuman1() { // sprite für den spielercharkter 
	unsigned char** human = (unsigned char**)malloc(sizeof(unsigned char*) * 9);
	human[0] = (unsigned char*)malloc(sizeof(unsigned char) * 6);
	human[0][0] = 0; human[0][1] = 5; human[0][2] = 6; human[0][3] = 3; human[0][4] = 5; human[0][5] = 255;
	human[1] = (unsigned char*)malloc(sizeof(unsigned char) * 9);
	human[1][0] = 1; human[1][1] = 5; human[1][2] = 6; human[1][3] = 1; human[1][4] = 1; human[1][5] = 1; human[1][6] = 4; human[1][7] = 2; human[1][8] = 255;
	human[2] = (unsigned char*)malloc(sizeof(unsigned char) * 12);
	human[2][0] = 0; human[2][1] = 4; human[2][2] = 1; human[2][3] = 1; human[2][4] = 4; human[2][5] = 1; human[2][6] = 2; human[2][7] = 3; human[2][8] = 1; human[2][9] = 1; human[2][10] = 2; human[2][11] = 255;
	human[3] = (unsigned char*)malloc(sizeof(unsigned char) * 11);
	human[3][0] = 1; human[3][1] = 5; human[3][2] = 5; human[3][3] = 1; human[3][4] = 1; human[3][5] = 1; human[3][6] = 1; human[3][7] = 1; human[3][8] = 2; human[3][9] = 3; human[3][10] = 255;
	human[4] = (unsigned char*)malloc(sizeof(unsigned char) * 8);
	human[4][0] = 0; human[4][1] = 5; human[4][2] = 5; human[4][3] = 3; human[4][4] = 4; human[4][5] = 1; human[4][6] = 2; human[4][7] = 255;
	human[5] = (unsigned char*)malloc(sizeof(unsigned char) * 4);
	human[5][0] = 0; human[5][1] = 18; human[5][2] = 2; human[5][3] = 255;
	human[6] = (unsigned char*)malloc(sizeof(unsigned char) * 4);
	human[6][0] = 0; human[6][1] = 18; human[6][2] = 2; human[6][3] = 255;
	human[7] = (unsigned char*)malloc(sizeof(unsigned char) * 4);
	human[7][0] = 0; human[7][1] = 18; human[7][2] = 2; human[7][3] = 255;
	human[8] = nullptr;
	return human; 
}
unsigned char** getgrassblock() {
	unsigned char** human = (unsigned char**)malloc(sizeof(unsigned char*) * 12);
	human[0] = (unsigned char*)malloc(sizeof(unsigned char) * 3);
	human[0][0] = 1; human[0][1] = 10; human[0][2] = 255;
	human[1] = (unsigned char*)malloc(sizeof(unsigned char) * 7);
	human[1][0] = 1; human[1][1] = 1; human[1][2] = 5; human[1][3] = 1; human[1][4] = 2; human[1][5] = 1; human[1][6] = 255;
	human[2] = (unsigned char*)malloc(sizeof(unsigned char) * 7);
	human[2][0] = 1; human[2][1] = 1; human[2][2] = 4; human[2][3] = 1; human[2][4] = 3; human[2][5] = 1; human[2][6] = 255;
	human[3] = human[2];
	human[4] = human[1];
	human[5] = (unsigned char*)malloc(sizeof(unsigned char) * 7);
	human[5][0] = 1; human[5][1] = 1; human[5][2] = 4; human[5][3] = 2; human[5][4] = 2; human[5][5] = 1; human[5][6] = 255;
	human[6] = (unsigned char*)malloc(sizeof(unsigned char) * 7);
	human[6][0] = 1; human[6][1] = 1; human[6][2] = 3; human[6][3] = 1; human[6][4] = 4; human[6][5] = 1; human[6][6] = 255;
	human[7] = human[2];
	human[8] = human[1];
	human[9] = human[1];
	human[10] = human[0];
	human[11] = nullptr;
	return human;
}
unsigned char** getcloud1() { // sprite für den spielercharkter 
	unsigned char** human = (unsigned char**)malloc(sizeof(unsigned char*) * 15);
	human[0] = (unsigned char*)malloc(sizeof(unsigned char) * 4);
	human[0][0] = 0; human[0][1] = 5; human[0][2] = 3; human[0][3] = 255;
	human[1] = (unsigned char*)malloc(sizeof(unsigned char) * 6);
	human[1][0] = 0; human[1][1] = 4; human[1][2] = 1; human[1][3] = 3; human[1][4] = 1;  human[1][5] = 255;
	human[2] = (unsigned char*)malloc(sizeof(unsigned char) * 8);
	human[2][0] = 0; human[2][1] = 3; human[2][2] = 1; human[2][3] = 2; human[2][4] = 1; human[2][5] = 2; human[2][6] = 1; human[2][7] = 255;
	human[3] = (unsigned char*)malloc(sizeof(unsigned char) * 8);
	human[3][0] = 0; human[3][1] = 3; human[3][2] = 1; human[3][3] = 3; human[3][4] = 1; human[3][5] = 1; human[3][6] = 1; human[3][7] = 255;
	human[4] = (unsigned char*)malloc(sizeof(unsigned char) * 8);
	human[4][0] = 0; human[4][1] = 2; human[4][2] = 2; human[4][3] = 3; human[4][4] = 1; human[4][5] = 1; human[4][6] = 1; human[4][7] = 255;
	human[5] = (unsigned char*)malloc(sizeof(unsigned char) * 8);
	human[5][0] = 0; human[5][1] = 1; human[5][2] = 1; human[5][3] = 2; human[5][4] = 1; human[5][5] = 4; human[5][6] = 1; human[5][7] = 255;
	human[6] = (unsigned char*)malloc(sizeof(unsigned char) * 7);
	human[6][0] = 1; human[6][1] = 1; human[6][2] = 5; human[6][3] = 1; human[6][4] = 2; human[6][5] = 1; human[6][6] = 255;
	human[7]  = human[6];
	human[8]  = human[5];
	human[9]  = human[4];
	human[10] = human[3];
	human[11] = human[2];
	human[12] = human[1];
	human[13] = human[0];
	human[14] = nullptr;
	return human;
}
unsigned char** gethuman2() { // sprite für den spielercharkter 
	unsigned char** human = (unsigned char**)malloc(sizeof(unsigned char*) * 15);
	human[0] = (unsigned char*)malloc(sizeof(unsigned char) * 4);
	human[0][0] = 0; human[0][1] = 1; human[0][2] = 5; human[0][3] = 255;
	human[1] = (unsigned char*)malloc(sizeof(unsigned char) * 3);
	human[1][0] = 1; human[1][1] = 7; human[1][2] = 255;
	human[2] = (unsigned char*)malloc(sizeof(unsigned char) * 3);
	human[2][0] = 1; human[2][1] = 8; human[2][2] = 255;
	human[3] = (unsigned char*)malloc(sizeof(unsigned char) * 4);
	human[3][0] = 0; human[3][1] = 1; human[3][2] = 9; human[3][3] = 255;
	human[4] = (unsigned char*)malloc(sizeof(unsigned char) * 6);
	human[4][0] = 0; human[4][1] = 2; human[4][2] = 9; human[4][3] = 10; human[4][4] = 1; human[4][5] = 255;
	human[5] = (unsigned char*)malloc(sizeof(unsigned char) * 6);
	human[5][0] = 0; human[5][1] = 2; human[5][2] = 10; human[5][3] = 8; human[5][4] = 2; human[5][5] = 255;
	human[6] = (unsigned char*)malloc(sizeof(unsigned char) * 6);
	human[6][0] = 0; human[6][1] = 3; human[6][2] = 9; human[6][3] = 8; human[6][4] = 2; human[6][5] = 255;
	human[7] = (unsigned char*)malloc(sizeof(unsigned char) * 6);
	human[7][0] = 0; human[7][1] = 3; human[7][2] = 15; human[7][3] = 2; human[7][4] = 2;human[7][5] = 255;
	human[8] = (unsigned char*)malloc(sizeof(unsigned char) * 15);
	human[8][0] = 1; human[8][1] = 3; human[8][2] = 2; human[8][3] = 1; human[8][4] = 2; human[8][5] = 4; human[8][6] = 1; human[8][7] = 1; human[8][8] = 2; human[8][9] = 1; human[8][10] = 1; human[8][11] = 1; human[8][12] = 1; human[8][13] = 1; human[8][14] = 255;
	human[9] = (unsigned char*)malloc(sizeof(unsigned char) * 15);
	human[9][0] = 1; human[9][1] = 1; human[9][2] = 3; human[9][3] = 2; human[9][4] = 1; human[9][5] = 2; human[9][6] = 2; human[9][7] = 1; human[9][8] = 1; human[9][9] = 1; human[9][10] = 2; human[9][11] = 1; human[9][12] = 1; human[9][13] = 3;human[9][14] = 255;
	human[10] = (unsigned char*)malloc(sizeof(unsigned char) * 12);
	human[10][0] = 0; human[10][1] = 2; human[10][2] = 2; human[10][3] = 2; human[10][4] = 6; human[10][5] = 1; human[10][6] = 1; human[10][7] = 2; human[10][8] = 1; human[10][9] = 1; human[10][10] = 1; human[10][11] = 255;
	human[11] = (unsigned char*)malloc(sizeof(unsigned char) * 11);
	human[11][0] = 1; human[11][1] = 2; human[11][2] = 5; human[11][3] = 1; human[11][4] = 4; human[11][5] = 6; human[11][6] = 255;
	human[12] = (unsigned char*)malloc(sizeof(unsigned char) * 13);
	human[12][0] = 1; human[12][1] = 1; human[12][2] = 3; human[12][3] = 1; human[12][4] = 2; human[12][5] = 1; human[12][6] = 2; human[12][7] = 1; human[12][8] = 2; human[12][9] = 1; human[12][10] = 2; human[12][11] = 1; human[12][12] = 255;
	human[13] = (unsigned char*)malloc(sizeof(unsigned char) * 6);
	human[13][0] = 0; human[13][1] = 5; human[13][2] = 5; human[13][3] = 3; human[13][4] = 4; human[13][5] = 255;
	human[14] = nullptr;
	return human;
}
unsigned char** getcords() {  // intialsirung für den array in dem die Postion der Objekte gespeichert wird
  unsigned char** cords = (unsigned char**)malloc(64 * sizeof(unsigned char*));
  for (int i = 0; i < 64; i++) {
    cords[i] = (unsigned char*)malloc(2 * sizeof(unsigned char));
  }
  for (int i = 0; i < 64; i++) {
    cords[i][0] = 255;
    cords[i][0] = 255; 
  }
  return cords;
}
unsigned char** gethitboxes() {  // intialsirung für den array in dem die Hitboxen gespeichert werden
  unsigned char** hitbox = (unsigned char**)malloc(64 * sizeof(unsigned char*));
  for (int i = 0; i < 64; i++) {
    hitbox[i] = (unsigned char*)malloc(5 * sizeof(unsigned char));
    hitbox[i][0] = 255;  //speichert die differnz zwischen cords position und beginn der Hitboxe auf der x achse
    hitbox[i][1] = 255;  //speichert x hitbox
    hitbox[i][2] = 255;  //speichert die differnz zwischen cords position und beginn der Hitboxe auf der y achse
    hitbox[i][3] = 255;  //speichert y hitbox
    hitbox[i][4] = 0;
  }

  return hitbox;
}
unsigned char* getobjectprops() {  // intialiesiert einen array in dem die eigenschafften der objecte gespeichert wird macht bis jetzt nichts
  unsigned char* objectprops = (unsigned char*)malloc(64 * sizeof(unsigned char));
  for (int i = 0; i < 64; i++) {
    objectprops[i] = 255;
  }
  return objectprops;
}
unsigned char** fsavedata(unsigned char mode, unsigned short x, unsigned char y, unsigned char props, unsigned char** ptrdelpos) {
  static unsigned char length;
  static unsigned char** savedata;
  static unsigned char** re;
  if (mode == 0) {
    savedata = (unsigned char**)malloc(192 * sizeof(unsigned char*));
    re = (unsigned char**)malloc(2 * sizeof(unsigned char*));
    re[0] = (unsigned char*)malloc(sizeof(unsigned char));
    for (int i = 0; i < 192; i++) {
      savedata[i] = nullptr;
    }
    length = 0;
    return nullptr;
  }
  if (mode == 1) {
    savedata[length] = (unsigned char*)malloc(4 * sizeof(unsigned char));
    savedata[length][0] = x / 256;
    savedata[length][1] = x % 256;
    savedata[length][2] = y;
    savedata[length][3] = props;
    length++;
    return nullptr;
  } 
  
  else if (mode == 2) {
    for (unsigned char i = 0; (i < 192) && (savedata[i] != nullptr); i++) {
      if ((x == savedata[i][0] * 256 + savedata[i][1])) {
        re[1] = savedata[i];
        re[0][0] = i;
        return re;
      }
    }

  } else if (mode == 3) {
    savedata[ptrdelpos[0][0]][0] = savedata[length - 1][0];
    savedata[ptrdelpos[0][0]][1] = savedata[length - 1][1];
    savedata[ptrdelpos[0][0]][2] = savedata[length - 1][2];
    savedata[ptrdelpos[0][0]][3] = savedata[length - 1][3];
    free(savedata[length - 1]);
    ptrdelpos[1] = nullptr;
    savedata[length - 1] = nullptr;
    length--;
  } 
  
  else if (mode == 4) {
    for (int i = 0; length <= i; i++) {
      free(savedata[i]);
    }
     free(savedata);
    length = 0;
  }
  return nullptr;
}
bool draw(unsigned char** object, int x, int y,bool test) {  // lasst die pixel eines sprits an der richtigen position leuchten
  bool value;
  int posy = y;
  int posx = x;
  for (int i = 0; object[i] != nullptr; i++) {
    
    if (object[i][0] == 0) {
      value = 0;
    } 
    else {
      value = 1;
    }
    posy = y;
    for(int j = 1;object[i][j] != 255;j++) {
      if (value == 0) {
        posy = posy +  object[i][j];
      } 
      else {
        for (int k = 0; k <  object[i][j]; k++) {
          display.drawPixel(posx - 63 ,63- posy+63, WHITE);
          posy++;
        }
      }
      if (value == 1) {
        value = 0;
      } else {
        value = 1;
      }
    }
    posx = posx + 1;
  }
  return 0;
}
void drawall(unsigned char*** objectarray, unsigned char** cords, unsigned char* objectprops) {  /// stellt alle objecte da
  display.clearDisplay();
  bool tmp;
  short lenght = 0;
  while (objectprops[lenght] != 255) {
    lenght++;
  }
  for (int i = 0; i < lenght; i++) {
    if (draw(objectarray[objectprops[i]], cords[i][0], cords[i][1],0)) {
    }
  }
}
void addobjectarray(unsigned char*** objectarray, unsigned char props) {  // fütgt ein neues elemnt zu objectarray hinzu
  if (objectarray[props] == nullptr) {
    if ((props == 0)&&(objectarray[0] == nullptr)) {
      objectarray[0] = gethuman2();
    } 
    else if ((props == 1)&&(objectarray[1] == nullptr)) {
      objectarray[1] = getgrassblock();
    } 
    else if ((props == 2)&&(objectarray[2] == nullptr)) {
      objectarray[2] = getcloud1();
    } 
    else if (((props == 3)||(props == 5))&&(objectarray[3] == nullptr)) {
      objectarray[3] = getflipedslime();
      objectarray[5] = getslime();
    } 
    else if (((props == 4)||(props == 6))&&(objectarray[4] == nullptr)) {
      Serial.println("ghost added");
      objectarray[4] = getgeist();
      objectarray[6] = getgeist();
    }
  }
}
void addcords(unsigned char** cords, short curentpos, unsigned char x, unsigned char y) {  // fütgt ein neues elemnt zu cords hinzu
  cords[curentpos][0] = 63 + x;
  cords[curentpos][1] = 63 + y;
}
void addhitboxes(unsigned char** hitboxes, short curentpos, unsigned char pwidht, unsigned char widht, unsigned char phight, unsigned char hight) {  // fütgt ein neues elemnt zu hitboxes hinzu
  hitboxes[curentpos][0] = pwidht;
  hitboxes[curentpos][1] = widht;
  hitboxes[curentpos][2] = phight;
  hitboxes[curentpos][3] = hight;
}
void addall(short curentpos, unsigned char*** objectarray, unsigned char** cords, unsigned char x, unsigned char y, unsigned char** hitboxes, unsigned char pwidht, unsigned char widht, unsigned char phight, unsigned char hight, unsigned char* objectprops, unsigned char props) {
  //funktion die zu objectarray, cords, hitboxes und objectprops ein element hinzufügt
  addobjectarray(objectarray, props);
  addcords(cords, curentpos, x, y);
  addhitboxes(hitboxes, curentpos, pwidht, widht, phight, hight);
  objectprops[curentpos] = props;
}
void addsaved(unsigned char*** objectarray, unsigned char** cords, unsigned char** hitboxes, unsigned char* objectprops, unsigned short x) {
  unsigned char lenghtreturned = 1;
  unsigned char lenghtobjectprops = 0;
  while (objectprops[lenghtobjectprops] != 255) {
    lenghtobjectprops++;
  }
  unsigned char** ptrdelpos = fsavedata(2, x, 0, 0, nullptr);
  while (ptrdelpos != nullptr) {
    if (ptrdelpos[1][3] == 1) {
      addall(lenghtobjectprops, objectarray, cords, ptrdelpos[1][0] * 256 + ptrdelpos[1][1] - g_xposition, ptrdelpos[1][2], hitboxes, 0, 10, 0, 10, objectprops, ptrdelpos[1][3]);
    } 
    else if (ptrdelpos[1][3] == 2) {
      addall(lenghtobjectprops, objectarray, cords, ptrdelpos[1][0] * 256 + ptrdelpos[1][1] - g_xposition, ptrdelpos[1][2], hitboxes, 0, 14, 0, 10, objectprops, ptrdelpos[1][3]);
    } 
    else if ((ptrdelpos[1][3] == 3) || (ptrdelpos[1][3] == 5)) {
      addall(lenghtobjectprops, objectarray, cords, ptrdelpos[1][0] * 256 + ptrdelpos[1][1] - g_xposition, ptrdelpos[1][2], hitboxes, 0, 10, 0, 5, objectprops, ptrdelpos[1][3]);
    } 
    else if ((ptrdelpos[1][3] == 4) || (ptrdelpos[1][3] == 6)) {
      addall(lenghtobjectprops, objectarray, cords, ptrdelpos[1][0] * 256 + ptrdelpos[1][1] - g_xposition, ptrdelpos[1][2], hitboxes, 0, 10, 0, 10, objectprops, ptrdelpos[1][3]);
      Serial.println("ghost nearly added");
    }
    fsavedata(3, 0, 0, 0, ptrdelpos);
    ptrdelpos = fsavedata(2, x, 0, 0, nullptr);
    lenghtobjectprops++;
  }
}
void movecords(unsigned char** cords, int x, int y, unsigned char von, unsigned char bis) {
  //beweg die cordinaten von einem oder mehreren elementen
  short cordslenght = 0;
  while ((cords[cordslenght][0] != 255) && (cordslenght < 64) && (cordslenght < bis)) {
    cordslenght++;
  }
  for (int i = von; i < cordslenght; i++) {
    cords[i][0] = cords[i][0] + x;
    cords[i][1] = cords[i][1] + y;
  }
}
void checkoutofrange(unsigned char** cords, unsigned char** hitboxes, unsigned char von, unsigned char bis, unsigned char* objectprops) {
  int futurepos ;
  for (int i = von; i < bis; i++) {
    futurepos = cords[i][0]  - 63;
    if ((futurepos+ 24 < 0)||(futurepos > 128  )) {
      unsigned short gxpos = futurepos  + g_xposition;
      fsavedata(1, g_xposition+cords[i][0]-63, cords[i][1] - 63, objectprops[i], nullptr);
      rremove(i, cords, hitboxes, objectprops);
      bis--;
    }
  }
}
bool checkmove2pos(unsigned char** cords, unsigned char** hitboxes, unsigned char pos,unsigned char pos2, int x, int y) {
	//überprüft ob ein ein großer schritt mit hitboxen passt 
	int lenght = 1;
	unsigned char check = 0;
	bool colision = 0;
	while (cords[lenght][0] != 255) {
		lenght++;
	}
		check = 0;
		for (int j = hitboxes[pos][0]; (j < hitboxes[pos][1] + hitboxes[pos][0]) && (colision == 0); j++) {
			if ((cords[pos][0] + x + j >= cords[pos2][0]) && (cords[pos][0] + x + j <= cords[pos2][0] + (hitboxes[pos2][1] ))) {
				colision = 1;
			}
		}
		if (colision == 1) {
			check++;
			colision = 0;
		}
		for (int j = hitboxes[pos][2]; (j < hitboxes[pos][3] + hitboxes[pos][2]) && (colision == 0); j++) {
			if ((cords[pos][1] + y + j >= cords[pos2][1]) && (cords[pos][1] + y + j <= cords[pos2][1] + (hitboxes[pos2][3] )-1)) {
				colision = 1;
			}
		}
		if (colision == 1) {
			check++;
			colision = 0;
		}
	if (check != 2) {
		return 0;
	}
	if (check == 2) {
		return 1;
	}
}
bool checkmove4(unsigned char** cords, unsigned char** hitboxes,unsigned char* objectprops, unsigned char pos, int x, int y) {
	//überprüft ob ein ein großer schritt mit hitboxen passt 
	int lenght = 1;
	unsigned char check = 0;
	bool colision = 0;
	while (cords[lenght][0] != 255) {
		lenght++;
	}
	for (int i = 0; (i < lenght) && (check != 2); i++) {
    if((i != pos)&&(objectprops[i] < 3)){
		  check = 0;
  		for (int j = hitboxes[pos][0]; (j < hitboxes[pos][1] + hitboxes[pos][0]) && (colision == 0); j++) {
	  		if ((cords[pos][0] + x + j >= cords[i][0]) && (cords[pos][0] + x + j <= cords[i][0] + (hitboxes[i][1] ))) {
		  		colision = 1;
			  }
  		}
	  	if (colision == 1) {
		  	check++;
  			colision = 0;
	  	}
		  for (int j = hitboxes[pos][2]; (j < hitboxes[pos][3] + hitboxes[pos][2]) && (colision == 0); j++) {
			  if ((cords[pos][1] + y + j >= cords[i][1]) && (cords[pos][1] + y + j <= cords[i][1] + (hitboxes[i][3] )-1)) {
				  colision = 1;
  			}
	  	}
		  if (colision == 1) {
			  check++;
			  colision = 0;
		  }
    }
	}
	if (check != 2) {
		return 0;
	}
	if (check == 2) {
		return 1;
	}
}
unsigned char checkmove(unsigned char** cords, unsigned char** hitboxes,unsigned char* objectprops, unsigned char pos, int x, int y) {
	//überprüft ob ein ein großer schritt mit hitboxen passt 
	if((objectprops[pos] == 0)&&(cords[pos][1] < 63)){
    return 3;
  }
  int lenght = 1;
	unsigned char check = 0;
	bool colision = 0;
	while (cords[lenght][0] != 255) {
		lenght++;
	}
	for (int i = 0; (i < lenght); i++) {
    if(i != pos){
		  check = 0;
  		for (int j = hitboxes[pos][0]; (j < hitboxes[pos][1] + hitboxes[pos][0]) && (colision == 0); j++) {
	  		if ((cords[pos][0] + x + j >= cords[i][0]) && (cords[pos][0] + x + j <= cords[i][0] + (hitboxes[i][1] ))) {
		  		colision = 1;
			  }
  		}
	  	if (colision == 1) {
		  	check++;
  			colision = 0;
	  	}
		  for (int j = hitboxes[pos][2]; (j < hitboxes[pos][3] + hitboxes[pos][2]) && (colision == 0); j++) {
			  if ((cords[pos][1] + y + j >= cords[i][1]) && (cords[pos][1] + y + j <= cords[i][1] + (hitboxes[i][3] )-1)) {
				  colision = 1;
  			}
	  	}
		  if (colision == 1) {
			  check++;
			  colision = 0;
		  }
      if(check == 2){
        if((objectprops[pos] == 0)&& (objectprops[i] >= 3)&&(objectprops[i] <= 6)){
          if(y < 0){
            if(x == 0){
              return 4 + i;
            }
            else if(checkmove2pos(cords,hitboxes,pos,i,x,0) == 0){
              return 4 + i;
            }
          }
          return 3;
        }
        else if ((objectprops[i] == 0)&&(objectprops[pos] >= 3)&&(objectprops[pos] <= 6)){
          return 3;
        }
        else{
          return 1;
        }
      }
	  }
  }
	return 0;
}
bool moveenemys(unsigned char** cords, unsigned char** hitboxes, unsigned char* objectprops, unsigned char pos) {
  if (hitboxes[pos][4] == 0) {
    if (( checkmove(cords, hitboxes, objectprops, pos, hitboxes[pos][1]+1, -1) != 0)||(objectprops[pos] == 4)||(objectprops[pos] == 6)){
      if(checkmove(cords, hitboxes, objectprops, pos, 1, 0) == 0) {
        movecords(cords, 1, 0, pos, pos + 1);
      }
      else if(checkmove(cords, hitboxes, objectprops, pos, 1, 0) == 3) {
        movecords(cords, 1, 0, pos, pos + 1);
        return 1;
      }
      else {
        hitboxes[pos][4] = 1;
        objectprops[pos] = objectprops[pos] + 2;
      } 
    }
    else {
        hitboxes[pos][4] = 1;
        objectprops[pos] = objectprops[pos] + 2;
      } 
  }
  else {
    if ((checkmove(cords, hitboxes, objectprops, pos, -1, -1) != 0)||(objectprops[pos] == 4)||(objectprops[pos] == 6)){
      if(checkmove(cords, hitboxes, objectprops, pos, -1, 0) == 0) {
        movecords(cords, -1, 0, pos, pos + 1);
      }
      else if(checkmove(cords, hitboxes, objectprops, pos, -1, 0) == 3) {
        movecords(cords, -1, 0, pos, pos + 1);
        return 1;
      }
      else {
        hitboxes[pos][4] = 0;
        objectprops[pos] = objectprops[pos] - 2;
      }
    }
    else {
      hitboxes[pos][4] = 0;
      objectprops[pos] = objectprops[pos] - 2;
    }

  }
  return 0;
}
bool moveplayer(unsigned char** cords, char* velocity, unsigned char** hitboxes, int x, int y, unsigned char* objectprops, unsigned char*** objectarray) {
  //macht physik, bewegt denn spieler und bewegt die Gegner
  int lenght = 0;
  while (cords[lenght][0] != 255) {
    lenght++;
  }
  for (short i = 1; i < lenght; i++) {
    if ((objectprops[i] == 3) || (objectprops[i] == 4) || (objectprops[i] == 5) || (objectprops[i] == 6)) {
      if(moveenemys(cords, hitboxes, objectprops, i) == 1){
        return 1;
      }
    }
  }
  int tmp = checkmove(cords,hitboxes,objectprops,0,0,-1);
  unsigned char tmp2;
  if(tmp == 0||((velocity[0] != 0)&&(tmp < 3))){
    int check = -1;
    tmp = ((-0.125 * velocity[1] * velocity[1] + velocity[0]) - (-0.125 * (velocity[1] - 1) * (velocity[1] - 1) + velocity[0]) / (velocity[1] - 1 - velocity[1]));
    if ((velocity[1] != 0) && (tmp != 0)) {
      if (tmp > 0) {
        for (int i = 1; (i <= tmp) && (check == -1); i++) {
          tmp2 = checkmove(cords, hitboxes, objectprops, 0, 0, i);
          if (tmp2 != 0) {
            check = i;
          }
          if(tmp2 >= 4){
            rremove(tmp2-4,cords,hitboxes,objectprops);
          }
        }
        if (check != -1) {
          movecords(cords, 0, check - 1, 0, 1);
          velocity[0] = 0;
          velocity[1] = 0;
        } else {
          movecords(cords, 0, tmp, 0, 1);
          velocity[1]++;
        }
      }
      if (tmp < 0) {
        check = 1;
        for (int i = 0; (i >= tmp) && (check == 1); i--) {
          tmp2 = checkmove(cords, hitboxes, objectprops, 0, 0, i);
          if (tmp2 != 0) {
            check = i;
          }
          if(tmp2 >= 4){
            rremove(tmp2-4,cords,hitboxes,objectprops);
          }
        }
        if (check != 1) {
          movecords(cords, 0, check + 1, 0, 1);
          velocity[0] = 0;
          velocity[1] = 0;
        } else {
          movecords(cords, 0, tmp, 0, 1);
          velocity[1]++;
        }
      }
    } 
    else {
      velocity[1]++;
    }
  }
  else if(tmp == 3){
    return 1;
  }
  else if((tmp >=4)&&(checkmove4(cords,hitboxes,objectprops,0,0,-1) == 0)){
    rremove(tmp-4,cords,hitboxes,objectprops);
  }
  tmp2 = checkmove(cords, hitboxes, objectprops, 0, x, y);
  if (tmp2 == 0) {
    
    while (cords[lenght][0] != 255) {
      lenght++;
    }
    movecords(cords, x, y, 0, 1);
    movecords(cords, -x, 0, 0, lenght);
    g_xposition = g_xposition + x;
    checkoutofrange(cords, hitboxes, 1, lenght, objectprops);
    
    if (x == 1) {
      addsaved(objectarray, cords, hitboxes, objectprops, g_xposition + 128  );
    } else {
      addsaved(objectarray, cords, hitboxes, objectprops, g_xposition -16);
    }
  }
  else if(tmp2 == 3){
    return 1;
  }
  return 0;
}
void fliphuman(unsigned char** human, unsigned char** hitboxes, unsigned char** cords, char direction) {
  //dreht den sprite des Menschen und passt die Hitbox an
  unsigned char lenght = 0;
  while (human[lenght] != nullptr) {
    lenght++;
  }
  for (int i = 0; i < lenght / 2; i++) {
    human[lenght] = human[i];
    human[i] = human[lenght - i - 1];
    human[lenght - i - 1] = human[lenght];
  }
  human[lenght] = nullptr;
  if (direction == 1) {
    hitboxes[0][0] = 0;
    cords[0][0] = cords[0][0] + 5;
  } else {
    hitboxes[0][0] = 7;
    cords[0][0] = cords[0][0] - 5;
  }
}
void freeGaO(unsigned char** gao){
  free(gao[0]);
  free(gao[6]);
  free(gao[8]);
  free(gao[10]);
  free(gao[13]);
  free(gao[15]);
  free(gao[17]);
  free(gao[19]);
  free(gao[20]);
  free(gao[22]);
  free(gao[23]);
  free(gao[24]);
  free(gao[36]);
  free(gao[38]);
  free(gao[39]);
  free(gao[51]);
  free(gao[67]);
  free(gao[68]);
  free(gao[69]);
  free(gao[70]);
  free(gao[71]);
  free(gao[72]);
  free(gao[81]);
  free(gao[83]);
  free(gao[84]);
  free(gao[86]);
  free(gao[87]);
  free(gao[112]);
  free(gao[115]);
  free(gao[117]);
  free(gao[119]);
  free(gao[121]);
}
void freemost(unsigned char pos, unsigned char*** objectarray, unsigned char** cords, unsigned char** hitboxes) {
  //macht etwas speicher frei
  free(hitboxes[pos]);
  free(cords[pos]);
}
void freeall(unsigned char*** objectarray, unsigned char** cords, unsigned char** hitboxes, unsigned char* objectpops) {
  //macht viel speicher frei
  unsigned char lenght = 0;
  while (objectpops[lenght] != 255) {
    lenght++;
  }
  for (int i = 0; i < lenght; i++) {
    freemost(i, objectarray, cords, hitboxes);
  }
  free(cords);
  free(hitboxes);
  free(objectpops);
}
char getstorechar() {  //nimmt input
  char storechar = 0;
  if (digitalRead(g_bleft) == 1) {
    storechar--;
  }
  if (digitalRead(g_bright) == 1) {
    storechar++;
  }
  return storechar;
}
bool jump() {
  if (digitalRead(g_bjump) == 1) {
    return 1;
  } else {
    return 0;
  }
}
bool game(unsigned char*** objectarray){
  fsavedata(0, 0, 0, 0, nullptr);
  //Serial.println(freeMemory());
  g_xposition = 63;
  int tmp;
  char direction = 1;
  unsigned char** cords = getcords();
  unsigned char** hitboxes = gethitboxes();
  unsigned char* objectprops = getobjectprops();
  char velocity[] = { 0, 0 };
  char x = 0;
  char y = 0;
  char storechar;
  unsigned char groundstreak = 0;
  addall(0, objectarray, cords, 9, 20, hitboxes, 7, 7, 0, 19, objectprops, 0);
  if(g_level == 0){
    for (int i = 1; i < 14; i++) {
      addall(i, objectarray, cords, (i - 1) * 10 - 1, 0, hitboxes, 0, 10, 0, 10, objectprops, 1);
    }
    addall(14, objectarray, cords, 39, 9, hitboxes, 0, 10, 0, 10, objectprops, 1);
    addall(15, objectarray, cords, 64, 10, hitboxes, 0, 10, 0, 5, objectprops, 3);
  }
  //addall(, objectarray, cords, , , hitboxes, 0, , 0, , objectprops, );
  else if(g_level == 1){
    for(char i = 1; i <16;i++) {
    addall(i, objectarray, cords, (i -1) * 10, 0, hitboxes, 0, 10, 0, 10, objectprops, 1);
    }
    addall(16, objectarray, cords,  0, 9, hitboxes, 0, 10, 0, 10, objectprops, 1);
    addall(17, objectarray, cords,  10, 9, hitboxes, 0, 10, 0, 10, objectprops, 1);
    addall(18, objectarray, cords,  0, 45, hitboxes, 0, 10, 0, 10, objectprops, 1);
    addall(19, objectarray, cords,  0, 54, hitboxes, 0, 10, 0, 10, objectprops, 1);
    addall(20, objectarray, cords,  10, 54, hitboxes, 0, 10, 0, 10, objectprops, 1);
    addall(21, objectarray, cords,130, 10, hitboxes, 0, 10, 0, 10, objectprops, 1);
    addall(22, objectarray, cords,120, 54, hitboxes, 0, 10, 0, 10, objectprops, 1);
    addall(23, objectarray, cords,130, 54, hitboxes, 0, 10, 0, 10, objectprops, 1);
    addall(24, objectarray, cords, 51, 10, hitboxes, 0, 10, 0,  5, objectprops, 3);
    addall(25, objectarray, cords, 91, 10, hitboxes, 0, 10, 0,  5, objectprops, 3);
    fsavedata(1,128+63+ 12, 0,1,nullptr);
    fsavedata(1,128+63+ 12,10,1,nullptr);
    fsavedata(1,128+63+ 12,54,1,nullptr);
    fsavedata(1,128+63+ 34,15,2,nullptr);
    fsavedata(1,128+63+ 63,27,2,nullptr);
    fsavedata(1,128+63+ 90, 6,2,nullptr);
    fsavedata(1,128+63+ 90,54,2,nullptr);
    fsavedata(1,128+63+119,12,2,nullptr);
  }
  else if(g_level == 2){
    for(char i = 1; i <16;i++) {
      addall(i, objectarray, cords, (i -1) * 10, 0, hitboxes, 0, 10, 0, 10, objectprops, 1);
    }
    addall(16, objectarray, cords, 10, 9, hitboxes, 0, 10, 0, 10, objectprops, 1);
    for(char i = 17; i <20;i++) {
    addall(i, objectarray, cords, (i -12) * 10, 9, hitboxes, 0, 10, 0, 10, objectprops, 1);
    }
    for(char i = 20; i <22;i++) {
      addall(i, objectarray, cords, (i -14) * 10, 18, hitboxes, 0, 10, 0, 10, objectprops, 1);
    }
    addall(22, objectarray,cords, 30, 36, hitboxes, 0, 10, 0, 10, objectprops, 1);
    for(char i = 23; i <27;i++) {
      addall(i, objectarray, cords, (i -22) * 10, 45, hitboxes, 0, 10, 0, 10, objectprops, 1);
    }
    for(char i = 27; i <33;i++) {
      addall(i, objectarray, cords, (i -27) * 10, 54, hitboxes, 0, 10, 0, 10, objectprops, 1);
    }
    addall(33, objectarray, cords, 30,10 , hitboxes, 0, 10, 0,  5, objectprops, 3);
    addall(34, objectarray, cords, 92,10 , hitboxes, 0, 10, 0,  5, objectprops, 3);
    addall(35, objectarray, cords,127 ,10 , hitboxes, 0, 10, 0,  5, objectprops, 3);

    fsavedata(1,128+63+ 23, 9,1,nullptr);
    fsavedata(1,128+63+ 23, 0,1,nullptr);
    fsavedata(1,128+63+ 23,45,1,nullptr);
    for(int i = 0;i < 12;i++){
      fsavedata(1,128+63+23+ i*10 ,54,1,nullptr);
    }
    for(int i = 0;i < 3;i++){
      fsavedata(1,128+63+44+ i*10 ,0,1,nullptr);
    }
    for(int i = 0;i < 3;i++){
      fsavedata(1,128+63+53+ i*10 ,9,1,nullptr);
    }
    fsavedata(1,128+63+ 91, 18,2,nullptr);
    fsavedata(1,128+63+112,22,2,nullptr);
    fsavedata(1,128+63+ 55,19,3,nullptr);
  }
  else if(g_level == 3){
    for(char i = 1; i <6;i++) {
      addall(i, objectarray, cords, (i -1) * 10, 0, hitboxes, 0, 10, 0, 10, objectprops, 1);
      addall(i+5, objectarray, cords, (i -1) * 10, 54, hitboxes, 0, 10, 0, 10, objectprops, 1);
    }
    addall(11, objectarray, cords, 0, 45, hitboxes, 0, 10, 0, 10, objectprops, 1);
    addall(12, objectarray, cords, 10, 45, hitboxes, 0, 10, 0, 10, objectprops, 1);
    addall(13, objectarray, cords, 20,  9, hitboxes, 0, 10, 0, 10, objectprops, 1);
    addall(14, objectarray, cords, 30,  9, hitboxes, 0, 10, 0, 10, objectprops, 1);
    addall(15, objectarray, cords, 40,  9, hitboxes, 0, 10, 0, 10, objectprops, 1);
    addall(16, objectarray, cords, 95,  9, hitboxes, 0, 10, 0, 10, objectprops, 1);
    addall(17, objectarray, cords,105,  9, hitboxes, 0, 10, 0, 10, objectprops, 1);
    addall(18, objectarray, cords,115,  9, hitboxes, 0, 10, 0, 10, objectprops, 1);
    addall(19, objectarray, cords,125,  9, hitboxes, 0, 10, 0, 10, objectprops, 1);
    addall(20, objectarray, cords,125, 18, hitboxes, 0, 10, 0, 10, objectprops, 1);
    addall(21, objectarray, cords, 95, 54, hitboxes, 0, 10, 0, 10, objectprops, 1);
    addall(22, objectarray, cords,105, 54, hitboxes, 0, 10, 0, 10, objectprops, 1);
    addall(23, objectarray, cords,115, 54, hitboxes, 0, 10, 0, 10, objectprops, 1);
    addall(24, objectarray, cords,125, 54, hitboxes, 0, 10, 0, 10, objectprops, 1);
    addall(25, objectarray, cords, 66, 5, hitboxes, 0, 10, 0, 10, objectprops, 2);
    addall(26, objectarray, cords,105, 19, hitboxes, 0, 10, 0,  5, objectprops, 3);

    fsavedata(1,128+63+ 17,26,2,nullptr);
    fsavedata(1,128+63+ 45,31,2,nullptr);
    for(int i = 0; i < 11;i++){
      fsavedata(1,128+63+ 50+ i*10,0 ,1,nullptr);
    }
    for(int i = 0; i <  5;i++){
      fsavedata(1,128+63+110+ i*10,9 ,1,nullptr);
    }
    for(int i = 0; i <  4;i++){
      fsavedata(1,128+63+120+ i*10,54,1,nullptr);
    }
    fsavedata(1,128+63+ 60,10,3,nullptr);
    fsavedata(1,128+63+110,19,3,nullptr);
  }
  drawall(objectarray, cords, objectprops);
  while (true) {
    x = 0;
    y = 0;

    if (checkmove(cords, hitboxes, objectprops, 0, 0, -1) == 1) {
      groundstreak++;
      if (groundstreak == 2) {
        groundstreak = 0;
      }
    }
    storechar = getstorechar();
    if ((storechar == -1)) {
      if (direction == 1) {
        fliphuman(objectarray[0], hitboxes, cords, direction);
        direction = -1;
      }
      x = -1;
    } else if ((storechar == 1)) {
      if (direction == -1) {
        fliphuman(objectarray[0], hitboxes, cords, direction);
        direction = 1;
      }
      x = 1;
    }
    if (jump()) {
      if (checkmove(cords, hitboxes, objectprops, 0, 0, -1) != 0) {
        velocity[0] = 4;
        velocity[1] = 0;
      }
      groundstreak = 0;
    }
    if(moveplayer(cords, velocity, hitboxes, x, y, objectprops, objectarray)){
      delay(125);
      display.clearDisplay();
      objectarray[7] = getGaO();
      draw(objectarray[7],63,63,1);
      freeGaO(objectarray[7]);
      display.display();
      freeall(objectarray, cords, hitboxes, objectprops);
      fsavedata(4,0,0,0,nullptr); 
      while(true){}
    }
    else if((g_level == 1)&&(g_xposition >= 290)){
      freeall(objectarray, cords, hitboxes, objectprops);
      fsavedata(4,0,0,0,nullptr);
      g_level++;
      game(objectarray);
    }
    else if((g_level == 2)&&(g_xposition >= 284)){
      freeall(objectarray, cords, hitboxes, objectprops);
      fsavedata(4,0,0,0,nullptr);
      g_level++;
      game(objectarray);
    }
    drawall(objectarray, cords, objectprops);
    display.display();
    //Serial.println(freeMemory());
  }
  freeall(objectarray, cords, hitboxes, objectprops);
  return 0;
}
void setup() {
  Serial.begin(31250);
  display.begin(SSD1306_SWITCHCAPVCC, 0x3c);
  display.display();
  pinMode(g_bleft, INPUT);
  pinMode(g_bright, INPUT);
  pinMode(g_bjump, INPUT);
  unsigned char** st = getst();
  display.clearDisplay();
  draw(st,63,63,0);
  display.display();
  for(short i = 0; i < 128;i++){
    free(st[i]);
  }
  free(st);
  while((jump() == 0)&&(getstorechar() == 0)){}

  unsigned char*** objectarray = getobjectarray();
  game(objectarray);
}
void loop() {

}}
